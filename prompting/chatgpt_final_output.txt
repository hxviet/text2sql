SELECT COUNT(*) FROM singer
SELECT COUNT(*) AS total_singers FROM singer
SELECT Name, Country, Age FROM singer ORDER BY Age DESC
SELECT Name, Country, Age FROM singer ORDER BY Age DESC
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France'
SELECT AVG(Age) as Average_Age, MIN(Age) as Minimum_Age, MAX(Age) as Maximum_Age FROM singer WHERE Country = 'France'
SELECT s.Name, s.Song_release_year FROM singer s WHERE s.Age = (SELECT MIN(Age) FROM singer)
SELECT s.Name, s.Song_release_year FROM singer s WHERE s.Age = (SELECT MIN(Age) FROM singer)
SELECT DISTINCT Country FROM singer WHERE Age > 20
SELECT DISTINCT Country FROM singer WHERE Age > 20
SELECT Country, COUNT(*) AS Singer_Count FROM singer GROUP BY Country
SELECT Country, COUNT(*) AS Num_Singers FROM singer GROUP BY Country
SELECT s.Name, si.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE s.Age > (SELECT AVG(Age) FROM singer) ORDER BY s.Name ASC
SELECT s.Name, s.Age, s.Song_Name FROM singer s WHERE s.Age > (SELECT AVG(Age) FROM singer)
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000
SELECT MAX(Capacity) AS Maximum_Capacity, AVG(Capacity) AS Average_Capacity FROM stadium
SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM stadium
SELECT Name, Capacity FROM stadium WHERE Stadium_ID = ( SELECT Stadium_ID FROM concert GROUP BY Stadium_ID ORDER BY AVG(Highest) DESC LIMIT 1 )
SELECT Name, Capacity FROM stadium WHERE Stadium_ID = ( SELECT Stadium_ID FROM concert GROUP BY Stadium_ID ORDER BY AVG(Highest) DESC LIMIT 1 )
SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015
SELECT COUNT(*) AS num_concerts FROM concert WHERE Year IN (2014, 2015)
SELECT s.Name AS Stadium_Name, COUNT(c.concert_ID) AS Number_of_Concerts FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Name
SELECT s.Name AS Stadium_Name, COUNT(c.concert_ID) AS Number_of_Concerts FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Name
SELECT s.Name, s.Capacity FROM stadium s INNER JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year >= 2014 GROUP BY s.Name, s.Capacity ORDER BY COUNT(c.concert_ID) DESC LIMIT 1
SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year > 2013 GROUP BY s.Stadium_ID ORDER BY COUNT(c.concert_ID) DESC LIMIT 1
SELECT Year, COUNT(*) AS num_concerts FROM concert GROUP BY Year ORDER BY num_concerts DESC LIMIT 1
SELECT Year, COUNT(*) AS num_concerts FROM concert GROUP BY Year ORDER BY num_concerts DESC LIMIT 1
SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Stadium_ID IS NULL
SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Stadium_ID IS NULL
SELECT DISTINCT s1.Country FROM singer s1, singer s2 WHERE s1.Age > 40 AND s2.Age < 30
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = 2014)
SELECT Name FROM stadium WHERE Stadium_ID NOT IN ( SELECT Stadium_ID FROM concert WHERE Year = 2014 )
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS num_singers FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_Name, concert.Theme
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS num_singers FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_Name, concert.Theme
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS num_concerts FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name
SELECT singer.Name, COUNT(concert.concert_ID) AS num_concerts FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY singer.Name
SELECT DISTINCT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON concert.concert_ID = singer_in_concert.concert_ID WHERE concert.Year = 2014
SELECT DISTINCT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = 2014
SELECT singer.Name, singer.Country FROM singer INNER JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID INNER JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE singer.Song_Name LIKE '%Hey%'
SELECT singer.Name, singer.Country FROM singer WHERE singer.Singer_ID IN ( SELECT singer_in_concert.Singer_ID FROM singer_in_concert JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE singer.Song_Name LIKE '%Hey%' )
SELECT s.Name, s.Location FROM stadium s INNER JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year = 2014 OR c.Year = 2015 GROUP BY s.Name, s.Location HAVING COUNT(DISTINCT c.Year) = 2
SELECT DISTINCT s.Name, s.Location FROM stadium s INNER JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year = 2014 AND s.Stadium_ID IN ( SELECT c2.Stadium_ID FROM concert c2 WHERE c2.Year = 2015 )
SELECT COUNT(*) FROM concert WHERE Stadium_ID = ( SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1 )
SELECT COUNT(*) AS num_concerts FROM concert WHERE Stadium_ID = ( SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1 )
SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > 10
SELECT COUNT(*) FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.weight > 10
SELECT MIN(weight) FROM Pets WHERE PetType = 'dog' AND pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog')
SELECT MIN(weight) FROM Pets WHERE PetType = 'dog'
SELECT PetType, MAX(weight) AS max_weight FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID GROUP BY PetType
SELECT PetType, MAX(weight) AS max_weight FROM Pets GROUP BY PetType
SELECT COUNT(*) AS num_pets FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Age > 20
SELECT COUNT(DISTINCT p.PetID) AS num_pets FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Age > 20
SELECT COUNT(*) FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Sex = 'F' AND p.PetType = 'dog'
SELECT COUNT(*) FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Sex = 'F' AND p.PetType = 'dog'
SELECT COUNT(DISTINCT PetType) AS Number_of_Distinct_Pet_Types FROM Pets
SELECT COUNT(DISTINCT PetType) AS num_pet_types FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID
SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType IN ('cat', 'dog')))
SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' OR PetType = 'dog'))
SELECT DISTINCT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' AND s.StuID IN ( SELECT s.StuID FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'dog' )
SELECT DISTINCT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' AND s.StuID IN ( SELECT s.StuID FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'dog' )
SELECT Major, Age FROM Student WHERE StuID NOT IN ( SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'Cat' )
SELECT Major, Age FROM Student WHERE StuID NOT IN ( SELECT StuID FROM Has_Pet WHERE PetID IN ( SELECT PetID FROM Pets WHERE PetType = 'cat' ) )
SELECT DISTINCT s.StuID FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID LEFT JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType <> 'cat' OR p.PetType IS NULL
SELECT DISTINCT s.StuID FROM Student s LEFT JOIN Has_Pet hp ON s.StuID = hp.StuID LEFT JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType <> 'cat' OR p.PetType IS NULL
SELECT Fname, Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'dog' AND StuID NOT IN ( SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat' ) LIMIT 1
SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'dog') AND StuID NOT IN (SELECT StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'cat')
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)
SELECT Pets.PetID, Pets.weight FROM Pets INNER JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID INNER JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.pet_age > 1
SELECT Pets.PetID, Pets.weight FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Pets.pet_age > 1
SELECT Pets.PetType, AVG(Pets.pet_age) AS avg_age, MAX(Pets.pet_age) AS max_age FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID GROUP BY Pets.PetType
SELECT PetType, AVG(pet_age) AS avg_age, MAX(pet_age) AS max_age FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID GROUP BY PetType
SELECT PetType, AVG(weight) AS avg_weight FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID GROUP BY PetType
SELECT PetType, AVG(weight) AS avg_weight FROM Pets JOIN Has_Pet ON Pets.PetID = Has_Pet.PetID GROUP BY PetType
SELECT Student.Fname, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID
SELECT DISTINCT Fname, Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID
SELECT Pets.PetID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith'
SELECT Pets.PetID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith'
SELECT Student.StuID, COUNT(Has_Pet.PetID) AS Num_Pets FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(Has_Pet.PetID) > 0
SELECT Student.StuID, COUNT(Has_Pet.PetID) AS num_pets FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID
SELECT s.Fname, s.Sex FROM Student s INNER JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.StuID, s.Fname, s.Sex HAVING COUNT(hp.PetID) > 1
SELECT s.Fname, s.Sex FROM Student s INNER JOIN Has_Pet hp ON s.StuID = hp.StuID GROUP BY s.StuID, s.Fname, s.Sex HAVING COUNT(hp.PetID) > 1
SELECT s.LName FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' AND p.pet_age = 3 ORDER BY hp.PetID DESC LIMIT 1
SELECT s.LName FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' AND p.pet_age = 3 ORDER BY p.pet_age DESC LIMIT 1
SELECT AVG(Age) AS AverageAge FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT AVG(Age) AS average_age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)
SELECT COUNT(DISTINCT Continent) AS NumContinents FROM continents
SELECT COUNT(DISTINCT Continent) AS NumContinents FROM countries
SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS NumCountries FROM continents c JOIN countries co ON c.Continent = co.Continent GROUP BY c.ContId, c.Continent ORDER BY c.ContId
SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS NumberOfCountries FROM continents c JOIN countries co ON c.Continent = co.Continent GROUP BY c.ContId, c.Continent
SELECT COUNT(DISTINCT CountryName) AS NumCountries FROM countries
SELECT COUNT(DISTINCT CountryName) AS NumCountries FROM countries
SELECT cm.Id, cm.FullName, COUNT(ml.ModelId) AS NumOfModels FROM car_makers cm INNER JOIN model_list ml ON cm.Maker = ml.Maker GROUP BY cm.Id, cm.FullName
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS NumModels FROM car_makers JOIN model_list ON car_makers.Maker = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName
SELECT model_list.Model, MIN(cars_data.Horsepower) AS MinHorsepower FROM model_list JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY model_list.Model ORDER BY MinHorsepower ASC LIMIT 1
SELECT m.Model FROM model_list m INNER JOIN cars_data c ON m.ModelId = c.Id WHERE c.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)
SELECT DISTINCT c.Model FROM cars_data c WHERE c.Weight < (SELECT AVG(Weight) FROM cars_data)
SELECT Model FROM model_list WHERE ModelId IN ( SELECT DISTINCT MakeId FROM car_names WHERE Model IN ( SELECT Model FROM cars_data WHERE Weight < ( SELECT AVG(Weight) FROM cars_data ) ) )
SELECT DISTINCT car_makers.Maker FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN cars_data ON model_list.ModelId = cars_data.Id WHERE cars_data.Year = 1970
SELECT DISTINCT car_makers.Maker FROM car_makers INNER JOIN car_names ON car_makers.Id = car_names.MakeId INNER JOIN cars_data ON car_names.Model = cars_data.Id WHERE cars_data.Year = 1970
SELECT cm.Maker, cd.Year FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.ModelId = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = (SELECT MIN(Year) FROM cars_data)
SELECT car_makers.Maker, MIN(cars_data.Year) AS EarliestYear FROM car_makers JOIN car_names ON car_makers.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN cars_data ON model_list.ModelId = cars_data.Id GROUP BY car_makers.Maker ORDER BY EarliestYear LIMIT 1
SELECT DISTINCT model_list.Model FROM model_list JOIN cars_data ON model_list.ModelId = cars_data.Id WHERE cars_data.Year > 1980
SELECT DISTINCT Model FROM model_list INNER JOIN cars_data ON model_list.ModelId = cars_data.Id WHERE Year > 1980
SELECT c.Continent, COUNT(DISTINCT cm.Country) AS CarMakersCount FROM continents c JOIN countries co ON c.ContId = co.Continent JOIN car_makers cm ON co.CountryName = cm.Country GROUP BY c.Continent
SELECT c.Continent, COUNT(DISTINCT cm.Maker) AS NumCarMakers FROM continents c JOIN countries co ON c.ContId = co.Continent JOIN car_makers cm ON co.CountryName = cm.Country GROUP BY c.Continent
SELECT countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryName ORDER BY COUNT(DISTINCT car_makers.Maker) DESC LIMIT 1
SELECT CountryName FROM countries WHERE CountryId = ( SELECT Country FROM car_makers GROUP BY Country ORDER BY COUNT(DISTINCT Maker) DESC LIMIT 1 )
SELECT cm.FullName AS MakerFullName, COUNT(ml.ModelId) AS ModelCount FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.FullName
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS NumberOfModels FROM car_makers JOIN model_list ON car_makers.Maker = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName
SELECT Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN car_makers ON car_names.Model = car_makers.Maker WHERE car_makers.FullName = 'amc hornet sportabout (sw)'
SELECT Accelerate FROM cars_data INNER JOIN car_names ON cars_data.Id = car_names.MakeId INNER JOIN model_list ON car_names.Model = model_list.Model INNER JOIN car_makers ON model_list.Maker = car_makers.Maker WHERE car_makers.FullName = 'amc hornet sportabout (sw)'
SELECT COUNT(DISTINCT car_makers.Maker) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryName WHERE countries.Continent = 'Europe' AND countries.CountryName = 'France'
SELECT COUNT(DISTINCT car_makers.Id) AS NumMakers FROM car_makers JOIN countries ON car_makers.Country = countries.CountryName WHERE countries.CountryName = 'France' AND car_makers.Maker = 'care'
SELECT COUNT(DISTINCT model_list.ModelId) AS num_models FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Maker WHERE car_makers.Country = 'usa'
SELECT COUNT(DISTINCT model_list.ModelId) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Maker JOIN countries ON car_makers.Country = countries.CountryName WHERE countries.CountryName = 'United States'
SELECT AVG(MPG) AS avg_mpg FROM cars_data WHERE Cylinders = 4
SELECT AVG(MPG) AS avg_mpg FROM cars_data WHERE Cylinders = 4
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974
SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974
SELECT DISTINCT car_makers.Maker, model_list.Model FROM car_makers INNER JOIN model_list ON car_makers.Maker = model_list.Maker ORDER BY car_makers.Maker ASC
SELECT car_makers.Maker, model_list.Model FROM car_makers INNER JOIN model_list ON car_makers.Maker = model_list.Maker
SELECT c.CountryName, c.CountryId FROM countries c INNER JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName, c.CountryId
SELECT countries.CountryId, countries.CountryName FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId, countries.CountryName
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150
SELECT Year, AVG(Weight) AS AvgWeight FROM cars_data GROUP BY Year
SELECT AVG(Weight) AS AvgWeight, Year FROM cars_data GROUP BY Year
SELECT DISTINCT c.CountryName, c.Continent FROM countries c INNER JOIN car_makers cm ON c.CountryId = cm.Country WHERE c.Continent = 'Europe' GROUP BY c.CountryName, c.Continent HAVING COUNT(DISTINCT cm.Maker) >= 3
SELECT DISTINCT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE c.Continent = 'Europe' GROUP BY c.CountryName HAVING COUNT(DISTINCT cm.Maker) >= 3
SELECT MAX(cars_data.Horsepower) AS Maximum_Horsepower, car_makers.Maker FROM cars_data JOIN model_list ON cars_data.ModelId = model_list.ModelId JOIN car_names ON model_list.Model = car_names.Model JOIN car_makers ON car_names.MakeId = car_makers.Id WHERE cars_data.Cylinders = 3 GROUP BY car_makers.Maker
SELECT MAX(cars_data.Horsepower) AS MaxHorsepower, car_makers.Maker FROM cars_data JOIN model_list ON cars_data.Id = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3 GROUP BY car_makers.Maker ORDER BY MaxHorsepower DESC LIMIT 1
SELECT model_list.Model, MAX(cars_data.MPG) AS MaxMPG FROM model_list JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY model_list.Model ORDER BY MaxMPG DESC LIMIT 1
SELECT TOP 1 car_names.Model, MAX(cars_data.MPG) AS MaxMPG FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Maker JOIN cars_data ON car_names.MakeId = cars_data.Id GROUP BY car_names.Model ORDER BY MaxMPG DESC
SELECT AVG(Horsepower) AS AvgHorsepower FROM cars_data WHERE Year < 1980
SELECT AVG(Horsepower) AS AvgHorsepower FROM cars_data WHERE Year < 1980
SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = 'volvo'
SELECT AVG(cars_data.Edispl) AS AvgEdispl FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Maker = 'Volvo'
SELECT cars_data.Cylinders, MAX(cars_data.Accelerate) AS max_accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Maker JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId GROUP BY cars_data.Cylinders
SELECT Cylinders, MAX(Accelerate) AS MaxAccelerationFROM cars_data GROUP BY Cylinders
SELECT Maker, COUNT(DISTINCT MakeId) AS NumMakes FROM model_list JOIN car_names ON model_list.ModelId = car_names.Model GROUP BY Maker ORDER BY NumMakes DESC LIMIT 1
SELECT Maker, Model, COUNT(DISTINCT MakeId) AS num_versions FROM model_list JOIN car_names ON model_list.ModelId = car_names.Model GROUP BY Maker, Model ORDER BY num_versions DESC LIMIT 1
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4
SELECT COUNT(*) AS NumCars FROM cars_data WHERE Cylinders > 4
SELECT COUNT(*) AS NumCarsProduced FROM cars_data WHERE Year = 1980
SELECT COUNT(*) FROM cars_data WHERE Year = 1980
SELECT COUNT(DISTINCT model_list.ModelId) AS num_car_models FROM car_makers JOIN model_list ON car_makers.FullName = model_list.Maker WHERE car_makers.FullName = 'American Motor Company'
SELECT COUNT(DISTINCT model_list.ModelId) AS NumModels FROM model_list INNER JOIN car_makers ON model_list.Maker = car_makers.Maker WHERE car_makers.FullName = 'American Motor Company'
SELECT car_makers.FullName, car_makers.Id FROM car_makers INNER JOIN model_list ON car_makers.Maker = model_list.Maker GROUP BY car_makers.FullName, car_makers.Id HAVING COUNT(DISTINCT model_list.ModelId) > 3
SELECT car_makers.Id, car_makers.Maker FROM car_makers INNER JOIN model_list ON car_makers.Maker = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.ModelId) > 3
SELECT DISTINCT m.Model FROM car_makers cm JOIN model_list m ON cm.Maker = m.Maker JOIN cars_data cd ON m.ModelId = cd.Id WHERE (cm.FullName = 'General Motors' OR cd.Weight > 3500)
SELECT DISTINCT ml.Model FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Maker JOIN cars_data cd ON ml.ModelId = cd.Id WHERE (cm.Maker = 'General Motors' OR cd.Weight > 3500)
SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000 ORDER BY Year
SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 AND Year IN ( SELECT DISTINCT Year FROM cars_data WHERE Weight > 3000 )
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data)
SELECT MIN(Cylinders) FROM cars_data WHERE Maker = 'volvo' ORDER BY Accelerate ASC LIMIT 1
SELECT MIN(c.Accelerate), cd.Cylinders FROM cars_data cd JOIN car_names cn ON cd.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Maker WHERE cm.Maker = 'volvo' GROUP BY cd.Cylinders ORDER BY MIN(c.Accelerate) LIMIT 1
SELECT COUNT(*) AS num_cars FROM cars_data WHERE Accelerate > ( SELECT MAX(Accelerate) FROM cars_data WHERE Horsepower = ( SELECT MAX(Horsepower) FROM cars_data ) )
SELECT COUNT(*) AS NumCars FROM cars_data WHERE Accelerate > ( SELECT MAX(Accelerate) FROM cars_data WHERE Horsepower = ( SELECT MAX(Horsepower) FROM cars_data ) )
SELECT COUNT(DISTINCT c.CountryName) AS NumCountries FROM countries c INNER JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName HAVING COUNT(DISTINCT cm.Maker) > 2
SELECT COUNT(DISTINCT CountryName) AS NumberOfCountries FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY CountryName HAVING COUNT(DISTINCT car_makers.Maker) > 2
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6
SELECT model_list.Model, MAX(cars_data.Horsepower) AS MaxHorsepower FROM model_list JOIN cars_data ON model_list.ModelId = cars_data.Id WHERE cars_data.Cylinders = 4 GROUP BY model_list.Model ORDER BY MaxHorsepower DESC LIMIT 1
SELECT model_list.Model, MAX(cars_data.Horsepower) AS MaxHorsepower FROM model_list JOIN cars_data ON model_list.ModelId = cars_data.Id WHERE cars_data.Cylinders = 4 GROUP BY model_list.Model ORDER BY MaxHorsepower DESC LIMIT 1
SELECT cn.MakeId, cm.Maker FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id JOIN car_makers cm ON cn.MakeId = cm.Id WHERE cd.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders <= 3
SELECT c.MakeId, c.Make FROM car_names c JOIN cars_data d ON c.MakeId = d.Id WHERE d.Horsepower != (SELECT MIN(Horsepower) FROM cars_data) AND d.Cylinders < 4
SELECT MAX(MPG) AS Max_MPG FROM cars_data WHERE Cylinders = 8 AND Year < 1980
SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980
SELECT DISTINCT m.ModelId, m.Maker, c.Make FROM model_list m JOIN car_names c ON m.Model = c.Model JOIN car_makers cm ON m.Maker = cm.Maker JOIN cars_data cd ON m.ModelId = cd.Id WHERE cd.Weight < 3500 AND cm.Country <> 'Ford Motor Company'
SELECT DISTINCT ml.Model FROM model_list ml INNER JOIN car_makers cm ON ml.Maker = cm.Maker INNER JOIN cars_data cd ON ml.ModelId = cd.Id WHERE cd.Weight < 3500 AND cm.Country <> 'Ford Motor Company'
SELECT DISTINCT c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Id IS NULL
SELECT DISTINCT c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Id IS NULL
SELECT car_makers.Id, car_makers.Maker FROM car_makers INNER JOIN model_list ON car_makers.Maker = model_list.Maker GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT model_list.ModelId) >= 2 AND COUNT(DISTINCT car_makers.Maker) > 3
SELECT car_makers.Id, car_makers.Maker FROM car_makers INNER JOIN model_list ON car_makers.Maker = model_list.Maker INNER JOIN car_names ON model_list.ModelId = car_names.Model INNER JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE car_makers.Id IN ( SELECT car_makers.Id FROM car_makers INNER JOIN model_list ON car_makers.Maker = model_list.Maker GROUP BY car_makers.Id HAVING COUNT(DISTINCT model_list.Model) >= 2 ) GROUP BY car_makers.Id, car_makers.Maker HAVING COUNT(DISTINCT car_names.MakeId) > 3
SELECT c.CountryId, c.CountryName FROM countries c INNER JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Maker IN ('fiat') GROUP BY c.CountryId, c.CountryName HAVING COUNT(DISTINCT cm.Id) > 3
SELECT c.CountryId, c.CountryName FROM countries c LEFT JOIN car_makers cm ON c.CountryId = cm.Country WHERE cm.Id IN (SELECT Id FROM car_makers GROUP BY Country HAVING COUNT(DISTINCT Maker) > 3) OR c.CountryId IN (SELECT DISTINCT Country FROM car_makers WHERE Maker = 'Fiat')
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT airlines.Country FROM airlines WHERE airlines.Airline = 'Jetblue Airways'
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways'
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'
SELECT COUNT(DISTINCT Airline) AS TotalAirlines FROM airlines
SELECT COUNT(DISTINCT Airline) AS TotalAirlines FROM flights
SELECT COUNT(*) FROM airports
SELECT COUNT(DISTINCT AirportCode) AS NumAirports FROM airports
SELECT COUNT(*) AS num_flights FROM flights
SELECT COUNT(*) AS num_flights FROM flights
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'
SELECT COUNT(DISTINCT airlines.Airline) FROM airlines WHERE airlines.Country = 'USA'
SELECT COUNT(DISTINCT Airline) FROM airlines WHERE Country = 'USA'
SELECT City, Country FROM airports WHERE AirportName = 'Alton airport'
SELECT City, Country FROM airports WHERE AirportName = 'Alton'
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT AirportName FROM airports WHERE AirportCode = 'AKO'
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
SELECT AirportName FROM airports WHERE City = 'Aberdeen'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = 'ATO'
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO'
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT COUNT(*) FROM flights JOIN airports AS source ON flights.SourceAirport = source.AirportCode JOIN airports AS dest ON flights.DestAirport = dest.AirportCode WHERE source.City = 'Aberdeen' AND dest.City = 'Ashley'
SELECT COUNT(*) FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'Aberdeen') AND DestAirport = (SELECT AirportCode FROM airports WHERE AirportName = 'Ashley')
SELECT COUNT(*) AS num_flights FROM flights WHERE Airline = 'JetBlue Airways'
SELECT COUNT(*) FROM flights WHERE Airline = 'Jetblue Airways'
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND DestAirport = 'ASY'
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'ASY'
SELECT COUNT(*) FROM flights WHERE Airline = 'United Airlines' AND SourceAirport = 'AHD'
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airports.AirportCode = 'AHD' AND airlines.Airline = 'United Airlines'
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode JOIN airlines ON flights.Airline = airlines.Abbreviation WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen'
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen'
SELECT airports.City, COUNT(*) AS num_arrivals FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY num_arrivals DESC LIMIT 1
SELECT airports.City, COUNT(*) AS DestCount FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY DestCount DESC LIMIT 1
SELECT airports.City, COUNT(*) AS num_departing_flights FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY num_departing_flights DESC LIMIT 1
SELECT airports.City, COUNT(flights.SourceAirport) AS num_flights FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY num_flights DESC LIMIT 1
SELECT SourceAirport, COUNT(*) AS num_flights FROM flights GROUP BY SourceAirport ORDER BY num_flights DESC LIMIT 1
SELECT SourceAirport, COUNT(*) AS num_flights FROM flights GROUP BY SourceAirport ORDER BY num_flights DESC LIMIT 1
SELECT SourceAirport, COUNT(*) AS num_flights FROM flights GROUP BY SourceAirport ORDER BY num_flights ASC LIMIT 1
SELECT SourceAirport, COUNT(*) AS num_flights FROM flights GROUP BY SourceAirport ORDER BY num_flights ASC LIMIT 1
SELECT airlines.Airline, COUNT(*) AS num_flights FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation GROUP BY airlines.Airline ORDER BY num_flights DESC LIMIT 1
SELECT airlines.Airline, COUNT(*) AS num_flights FROM flights JOIN airlines ON flights.Airline = airlines.Abbreviation GROUP BY airlines.Airline ORDER BY num_flights DESC LIMIT 1
SELECT Abbreviation, Country FROM airlines WHERE uid = ( SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) ASC LIMIT 1 )
SELECT Abbreviation, Country FROM airlines WHERE uid = ( SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) = ( SELECT MIN(cnt) FROM ( SELECT COUNT(*) AS cnt FROM flights GROUP BY Airline ) AS subquery ) ) LIMIT 1
SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.Abbreviation = flights.Airline WHERE flights.SourceAirport = 'AHD'
SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.Abbreviation = flights.Airline WHERE flights.SourceAirport = 'AHD'
SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.Abbreviation = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD'
SELECT DISTINCT Airline FROM airlines INNER JOIN flights ON airlines.Abbreviation = flights.Airline WHERE flights.DestAirport = 'AHD'
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f1 ON a.Abbreviation = f1.Airline JOIN flights f2 ON a.Abbreviation = f2.Airline JOIN airports ap1 ON f1.SourceAirport = ap1.AirportCode JOIN airports ap2 ON f2.SourceAirport = ap2.AirportCode WHERE ap1.AirportCode = 'APG' AND ap2.AirportCode = 'CVO'
SELECT a.Airline FROM airlines a INNER JOIN flights f ON a.Abbreviation = f.Airline WHERE f.SourceAirport IN ('APG', 'CVO') GROUP BY a.Airline HAVING COUNT(DISTINCT f.SourceAirport) = 2
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.Abbreviation = f.Airline WHERE f.SourceAirport = 'CVO' AND a.Airline NOT IN ( SELECT DISTINCT a2.Airline FROM airlines a2 JOIN flights f2 ON a2.Abbreviation = f2.Airline WHERE f2.SourceAirport = 'APG' )
SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'CVO' AND Airline NOT IN ( SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'APG' )
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10
SELECT Airline, COUNT(*) AS num_flights FROM flights GROUP BY Airline HAVING num_flights < 200
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200
SELECT FlightNo FROM flights WHERE Airline = 'United Airlines'
SELECT FlightNo FROM flights WHERE Airline = 'United Airlines'
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'
SELECT FlightNo FROM flights WHERE DestAirport = 'APG'
SELECT FlightNo FROM flights WHERE DestAirport = 'APG'
SELECT f.FlightNo FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen'
SELECT FlightNo FROM flights WHERE SourceAirport = 'Aberdeen'
SELECT f.FlightNo FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = 'Aberdeen'
SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen'
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Aberdeen', 'Abilene')
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City IN ('Aberdeen', 'Abilene')
SELECT AirportName FROM airports WHERE AirportCode NOT IN ( SELECT DISTINCT SourceAirport FROM flights UNION SELECT DISTINCT DestAirport FROM flights )
SELECT AirportName, AirportCode FROM airports WHERE AirportCode NOT IN ( SELECT DISTINCT SourceAirport FROM flights UNION SELECT DISTINCT DestAirport FROM flights )
SELECT COUNT(Employee_ID) AS num_employees FROM employee
SELECT COUNT(Employee_ID) AS num_employees FROM employee
SELECT Name, Age FROM employee ORDER BY Age ASC
SELECT Name FROM employee ORDER BY Age ASC
SELECT City, COUNT(Employee_ID) AS Num_Employees FROM employee GROUP BY City
SELECT City, COUNT(Employee_ID) AS Num_Employees FROM employee GROUP BY City
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1
SELECT Location, COUNT(DISTINCT Shop_ID) AS Num_Shops FROM shop GROUP BY Location
SELECT Location, COUNT(DISTINCT Shop_ID) AS Num_Shops FROM shop GROUP BY Location
SELECT s.Manager_name, s.District FROM shop s WHERE s.Number_products = (SELECT MAX(Number_products) FROM shop)
SELECT s.Manager_name, s.District FROM shop s WHERE s.Number_products = (SELECT MAX(Number_products) FROM shop)
SELECT MIN(Number_products) AS min_products, MAX(Number_products) AS max_products FROM shop
SELECT MIN(Number_products) AS min_products, MAX(Number_products) AS max_products FROM shop
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC
SELECT s.Name FROM shop s WHERE s.Number_products > (SELECT AVG(s2.Number_products) FROM shop s2)
SELECT s.Name FROM shop s WHERE s.Number_products > (SELECT AVG(Number_products) FROM shop)
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1
SELECT e.Name FROM employee e INNER JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Bonus = (SELECT MAX(Bonus) FROM evaluation)
SELECT e.Name, MAX(ev.Bonus) AS Max_Bonus FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Name ORDER BY Max_Bonus DESC LIMIT 1
SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1
SELECT s.Name AS Shop_Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1
SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Employee_ID IS NULL
SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Employee_ID IS NULL
SELECT s.Name AS Shop_Name, COUNT(h.Employee_ID) AS Num_Employees_Hired FROM shop s INNER JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name
SELECT shop.Name, COUNT(employee.Employee_ID) AS num_employees FROM shop INNER JOIN hiring ON shop.Shop_ID = hiring.Shop_ID INNER JOIN employee ON hiring.Employee_ID = employee.Employee_ID GROUP BY shop.Name
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation
SELECT * FROM hiring
SELECT e.Name AS Employee_Name, e.Age, e.City, s.Name AS Shop_Name, s.Location, s.District, s.Number_products, s.Manager_name, h.Start_from, h.Is_full_time FROM employee e INNER JOIN hiring h ON e.Employee_ID = h.Employee_ID INNER JOIN shop s ON h.Shop_ID = s.Shop_ID
SELECT DISTINCT s1.District FROM shop s1 JOIN shop s2 ON s1.District = s2.District WHERE s1.Number_products < 3000 AND s2.Number_products > 10000
SELECT DISTINCT s.District FROM shop s WHERE s.Number_products < 3000 AND s.District IN ( SELECT s2.District FROM shop s2 WHERE s2.Number_products > 10000 )
SELECT COUNT(DISTINCT Location) AS num_locations FROM shop
SELECT COUNT(DISTINCT Location) AS num_store_locations FROM shop
SELECT COUNT(*) AS num_documents FROM Documents
SELECT COUNT(*) AS num_documents FROM Documents
SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents
SELECT Documents.Document_ID, Documents.Document_Name, Documents.Document_Description FROM Documents
SELECT Documents.Document_Name, Documents.Template_ID FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Description LIKE '%w%'
SELECT d.Document_Name, d.Document_ID, t.Template_ID FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Description LIKE '%w%'
SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = "Robbin CV"
SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Robbin CV'
SELECT COUNT(DISTINCT Template_Type_Code) FROM Templates
SELECT COUNT(DISTINCT Templates.Template_ID) FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID
SELECT COUNT(DISTINCT Documents.Document_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = 'PPT'
SELECT COUNT(DISTINCT Document_ID) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'PPT'
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Num_Documents FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID
SELECT Templates.Template_ID, COUNT(*) AS Usage_Count FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID
SELECT Templates.Template_ID, Templates.Template_Type_Code FROM Templates WHERE Templates.Template_ID = ( SELECT Documents_ID FROM Documents GROUP BY Documents.Template_ID ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT Template_ID, Template_Type_Code FROM Templates WHERE Template_ID = ( SELECT Template_ID FROM Documents GROUP BY Template_ID ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(DISTINCT Document_ID) > 1
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(DISTINCT Document_ID) > 1
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL
SELECT Templates.Template_ID FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_ID IS NULL
SELECT COUNT(DISTINCT Template_ID) AS Template_Count FROM Templates
SELECT COUNT(DISTINCT Templates.Template_ID) AS Num_Templates FROM Templates
SELECT Templates.Template_ID, Templates.Version_Number, Ref_Template_Types.Template_Type_Code FROM Templates INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates
SELECT DISTINCT Template_Type_Code FROM Templates
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN ('PP', 'PPT')
SELECT COUNT(*) AS num_templates FROM Templates WHERE Template_Type_Code = 'CV'
SELECT COUNT(*) AS Total_Templates FROM Templates WHERE Template_Type_Code = 'CV'
SELECT t.Version_Number, t.Template_Type_Code FROM Templates t WHERE t.Version_Number > 5
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Num_Templates FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Num_Templates FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code
SELECT Template_Type_Code, COUNT(*) AS num_templates FROM Templates GROUP BY Template_Type_Code ORDER BY num_templates DESC LIMIT 1
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT Template_Type_Code FROM Ref_Template_Types GROUP BY Template_Type_Code HAVING COUNT(*) < 3
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code IN ( SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(Template_ID) < 3 )
SELECT MIN(t.Version_Number), t.Template_Type_Code FROM Templates t GROUP BY t.Template_Type_Code ORDER BY MIN(t.Version_Number) LIMIT 1
SELECT MIN(Version_Number) AS Lowest_Version_Number, Template_Type_Code FROM Templates GROUP BY Template_Type_Code
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'Data base'
SELECT Templates.Template_Type_Code FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'Data base'
SELECT DISTINCT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = 'BK'
SELECT DISTINCT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rt ON t.Template_Type_Code = rt.Template_Type_Code WHERE rt.Template_Type_Code = 'BK'
SELECT Ref_Template_Types.Template_Type_Code, COUNT(DISTINCT Documents.Document_ID) AS Num_Documents FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code
SELECT Ref_Template_Types.Template_Type_Code, COUNT(DISTINCT Documents.Document_ID) AS Num_Documents FROM Ref_Template_Types INNER JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code
SELECT Template_Type_Code FROM Templates WHERE Template_ID IN ( SELECT Template_ID FROM Documents ) GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1
SELECT TOP 1 Template_Type_Code FROM Templates INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN ( SELECT Template_Type_Code FROM Templates )
SELECT DISTINCT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types LEFT JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code WHERE Templates.Template_Type_Code IS NULL
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD'
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'
SELECT DISTINCT tt.Template_Type_Description FROM Ref_Template_Types tt JOIN Templates t ON tt.Template_Type_Code = t.Template_Type_Code JOIN Documents d ON t.Template_ID = d.Template_ID
SELECT DISTINCT t.Template_Details FROM Templates t INNER JOIN Documents d ON t.Template_ID = d.Template_ID WHERE d.Document_ID IN (SELECT Document_ID FROM Paragraphs)
SELECT Template_ID FROM Templates WHERE Template_Type_Code = (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation')
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation')
SELECT COUNT(*) AS Total_Paragraphs FROM Paragraphs
SELECT COUNT(*) AS num_paragraphs FROM Paragraphs
SELECT COUNT(*) AS Number_of_Paragraphs FROM Paragraphs INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Summer Show'
SELECT COUNT(*) AS num_paragraphs FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'Summer Show'
SELECT p.Paragraph_ID, p.Document_ID, p.Paragraph_Text, p.Other_Details FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types tt ON t.Template_Type_Code = tt.Template_Type_Code WHERE p.Paragraph_Text LIKE '%Korea%'
SELECT * FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID JOIN Templates t ON d.Template_ID = t.Template_ID WHERE p.Paragraph_Text LIKE '%Korea%'
SELECT Paragraph_ID, Paragraph_Text FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE d.Document_Name = 'Welcome to NY'
SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID IN ( SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY' )
SELECT Paragraph_Text FROM Paragraphs INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews'
SELECT Paragraph_Text FROM Paragraphs INNER JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID INNER JOIN Templates ON Documents.Template_ID = Templates.Template_ID INNER JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Document_Name = 'Customer reviews'
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Num_Paragraphs FROM Documents INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Num_Paragraphs FROM Documents INNER JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID
SELECT Documents.Document_ID, Documents.Document_Name, COUNT(Paragraphs.Paragraph_ID) as Paragraph_Count FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID, Documents.Document_Name
SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Number_of_Paragraphs FROM Documents d INNER JOIN Templates t ON d.Template_ID = t.Template_ID INNER JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name
SELECT DISTINCT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2
SELECT d.Document_ID, d.Document_Name FROM Documents d INNER JOIN ( SELECT Document_ID, COUNT(*) AS num_paragraphs FROM Paragraphs GROUP BY Document_ID ) p ON d.Document_ID = p.Document_ID ORDER BY p.num_paragraphs DESC LIMIT 1
SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY COUNT(p.Paragraph_ID) DESC LIMIT 1
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(*) ASC LIMIT 1
SELECT Document_ID FROM Documents WHERE Template_ID IN ( SELECT Template_ID FROM Templates WHERE Template_ID = Documents.Template_ID ORDER BY ( SELECT COUNT(*) FROM Paragraphs WHERE Document_ID = Documents.Document_ID ) ASC LIMIT 1 )
SELECT Document_ID FROM Documents WHERE Document_ID IN ( SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(DISTINCT Paragraph_ID) BETWEEN 1 AND 2 )
SELECT DISTINCT d.Document_ID FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(DISTINCT p.Paragraph_ID) BETWEEN 1 AND 2
SELECT d.Document_ID FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_Text = 'Brazil' OR p.Paragraph_Text = 'Ireland'
SELECT DISTINCT d.Document_ID FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_Text IN ('Brazil', 'Ireland')
SELECT COUNT(DISTINCT Teacher_ID) AS num_teachers FROM course_arrange
SELECT COUNT(DISTINCT Teacher_ID) AS Total_Teachers FROM course_arrange
SELECT Name FROM teacher ORDER BY Age ASC
SELECT Name FROM teacher ORDER BY Age ASC
SELECT Age, Hometown FROM teacher
SELECT Age, Hometown FROM teacher
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'
SELECT Name FROM teacher WHERE Age IN (32, 33)
SELECT Name FROM teacher WHERE Age IN (32, 33)
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT teacher.Hometown, COUNT(DISTINCT teacher.Teacher_ID) AS Num_Teachers FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Hometown
SELECT teacher.Hometown, COUNT(DISTINCT teacher.Teacher_ID) AS Num_Teachers FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Hometown
SELECT teacher.Hometown, COUNT(*) AS count FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Hometown ORDER BY count DESC LIMIT 1
SELECT teacher.Hometown, COUNT(*) AS Num_Teachers FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Hometown ORDER BY Num_Teachers DESC LIMIT 1
SELECT DISTINCT t1.Hometown FROM teacher t1 INNER JOIN course_arrange ca1 ON t1.Teacher_ID = ca1.Teacher_ID INNER JOIN course_arrange ca2 ON ca1.Course_ID = ca2.Course_ID AND ca1.Teacher_ID <> ca2.Teacher_ID INNER JOIN teacher t2 ON ca2.Teacher_ID = t2.Teacher_ID WHERE t1.Hometown = t2.Hometown
SELECT DISTINCT t1.Hometown FROM teacher t1 INNER JOIN course_arrange ca1 ON t1.Teacher_ID = ca1.Teacher_ID INNER JOIN course_arrange ca2 ON ca1.Course_ID = ca2.Course_ID AND ca1.Teacher_ID <> ca2.Teacher_ID WHERE t1.Hometown IS NOT NULL
SELECT teacher.Name, course.Course FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID
SELECT teacher.Name, course.Course FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC
SELECT teacher.Name, course.Course FROM teacher INNER JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID INNER JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC
SELECT teacher.Name FROM course_arrange JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID WHERE course.Course = 'math'
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'math'
SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS num_courses_taught FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name
SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS num_courses_taught FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name
SELECT t.Name FROM teacher t INNER JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID HAVING COUNT(DISTINCT ca.Course_ID) >= 2
SELECT DISTINCT t.Name FROM teacher t INNER JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID HAVING COUNT(DISTINCT ca.Course_ID) >= 2
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)
SELECT DISTINCT t.Name FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID WHERE ca.Course_ID IS NULL
SELECT COUNT(*) FROM visitor WHERE Age < 30
SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC
SELECT AVG(Age) AS Average_Age FROM visitor WHERE Level_of_membership <= 4
SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC
SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1
SELECT AVG(Num_of_Staff) AS Avg_Staff FROM museum WHERE Open_Year < 2009
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'
SELECT m.Name FROM museum m WHERE m.Num_of_Staff > ( SELECT MIN(m2.Num_of_Staff) FROM museum m2 WHERE m2.Open_Year > 2010 )
SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor INNER JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Age HAVING COUNT(DISTINCT visit.Museum_ID) > 1
SELECT visitor.ID, visitor.Name, visitor.Level_of_membership, SUM(visit.Total_spent) AS Total_spent FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Level_of_membership ORDER BY Total_spent DESC LIMIT 1
SELECT m.Museum_ID, m.Name FROM museum m JOIN visit v ON m.Museum_ID = v.Museum_ID GROUP BY m.Museum_ID, m.Name ORDER BY COUNT(*) DESC LIMIT 1
SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)
SELECT v.Name, v.Age FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID GROUP BY v.ID ORDER BY SUM(vi.Num_of_Ticket) DESC LIMIT 1
SELECT AVG(Num_of_Ticket) AS avg_tickets, MAX(Num_of_Ticket) AS max_tickets FROM visit
SELECT SUM(Total_spent) AS Total_ticket_expense FROM visit INNER JOIN visitor ON visit.visitor_ID = visitor.ID WHERE visitor.Level_of_membership = 1
SELECT v.Name FROM visitor v INNER JOIN visit v1 ON v.ID = v1.visitor_ID INNER JOIN visit v2 ON v.ID = v2.visitor_ID INNER JOIN museum m1 ON v1.Museum_ID = m1.Museum_ID INNER JOIN museum m2 ON v2.Museum_ID = m2.Museum_ID WHERE m1.Open_Year < 2009 AND m2.Open_Year > 2011 GROUP BY v.Name HAVING COUNT(DISTINCT v1.Museum_ID) > 1 AND COUNT(DISTINCT v2.Museum_ID) > 1
SELECT COUNT(DISTINCT visitor.ID) AS num_visitors FROM visitor LEFT JOIN visit ON visitor.ID = visit.visitor_ID LEFT JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year > 2010 OR museum.Open_Year IS NULL
SELECT COUNT(*) AS num_museums FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008
SELECT COUNT(DISTINCT player_id) AS total_players FROM players
SELECT COUNT(DISTINCT player_id) AS num_players FROM players
SELECT COUNT(*) AS total_matches FROM matches
SELECT COUNT(*) AS num_matches FROM matches
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT first_name, birth_date FROM players WHERE country_code = 'USA'
SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches
SELECT AVG(loser_age) as avg_loser_age, AVG(winner_age) as avg_winner_age FROM matches
SELECT AVG(winner_rank) AS average_rank FROM matches
SELECT AVG(winner_rank) AS average_winner_rank FROM matches WHERE winner_rank IS NOT NULL
SELECT MAX(loser_rank) AS highest_rank_of_losers FROM matches
SELECT MAX(loser_rank) AS best_rank_of_losers FROM matches
SELECT COUNT(DISTINCT country_code) AS distinct_country_codes FROM players
SELECT COUNT(DISTINCT country_code) AS distinct_countries FROM players
SELECT COUNT(DISTINCT loser_name) AS num_distinct_names FROM matches
SELECT COUNT(DISTINCT loser_name) AS num_different_losers FROM matches
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10
SELECT DISTINCT p1.first_name, p1.last_name FROM players p1 JOIN matches m1 ON p1.player_id = m1.winner_id AND m1.year = 2013 JOIN matches m2 ON p1.player_id = m2.winner_id AND m2.year = 2016
SELECT p.first_name, p.last_name FROM players p INNER JOIN matches m1 ON p.player_id = m1.winner_id INNER JOIN matches m2 ON p.player_id = m2.winner_id WHERE m1.year = 2013 AND m2.year = 2016
SELECT COUNT(*) AS num_matches FROM matches WHERE year IN (2013, 2016)
SELECT COUNT(*) AS num_matches FROM matches WHERE year IN (2013, 2016)
SELECT players.country_code, players.first_name FROM players INNER JOIN matches AS m1 ON players.player_id = m1.winner_id AND m1.tourney_name = 'WTA Championships' INNER JOIN matches AS m2 ON players.player_id = m2.winner_id AND m2.tourney_name = 'Australian Open' WHERE m1.winner_id = m2.winner_id
SELECT p.first_name, p.country_code FROM players p INNER JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'WTA Championships' AND m.tourney_id IN (SELECT tourney_id FROM matches WHERE tourney_name = 'Australian Open' AND winner_id = p.player_id) GROUP BY p.player_id HAVING COUNT(DISTINCT m.tourney_name) = 2
SELECT p.first_name, p.country_code FROM players p ORDER BY p.birth_date LIMIT 1
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.ranking_date = (SELECT MIN(ranking_date) FROM rankings) ORDER BY p.birth_date ASC LIMIT 1
SELECT first_name, last_name FROM players ORDER BY birth_date
SELECT CONCAT(first_name, ' ', last_name) AS full_name, birth_date FROM players ORDER BY birth_date
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM players WHERE hand = 'L' ORDER BY birth_date
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.tours = (SELECT MAX(tours) FROM rankings) LIMIT 1
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.tours = (SELECT MAX(tours) FROM rankings) LIMIT 1
SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1
SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1
SELECT winner_name, MAX(winner_rank_points) AS max_rank_points FROM matches JOIN rankings ON matches.winner_id = rankings.player_id GROUP BY winner_name ORDER BY max_rank_points DESC LIMIT 1
SELECT winner_name, winner_rank_points FROM matches JOIN rankings ON matches.winner_id = rankings.player_id GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT p.first_name, p.last_name FROM players p JOIN rankings r ON p.player_id = r.player_id JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'Australian Open' ORDER BY r.ranking_points DESC LIMIT 1
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)
SELECT m.winner_name, m.loser_name FROM matches m ORDER BY m.minutes DESC LIMIT 1
SELECT players.first_name, AVG(rankings.ranking) AS avg_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name
SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name
SELECT country_code, COUNT(DISTINCT player_id) AS num_players FROM players GROUP BY country_code
SELECT country_code, COUNT(DISTINCT player_id) AS num_players FROM players GROUP BY country_code
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(player_id) DESC LIMIT 1
SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code ORDER BY num_players DESC LIMIT 1
SELECT DISTINCT country_code FROM players WHERE country_code IN ( SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50 )
SELECT DISTINCT country_code FROM players WHERE country_code IN ( SELECT country_code FROM players GROUP BY country_code HAVING COUNT(player_id) > 50 )
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date
SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year
SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year
SELECT p.first_name, p.last_name, m.winner_rank FROM players p JOIN matches m ON p.player_id = m.winner_id ORDER BY m.winner_age ASC LIMIT 3
SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY winner_age ASC LIMIT 3
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'
SELECT COUNT(*) FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'WTA Championships' AND players.hand = 'L'
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.ranking_points = (SELECT MAX(ranking_points) FROM rankings)
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.ranking_points = (SELECT MAX(ranking_points) FROM rankings) LIMIT 1
SELECT hand, COUNT(*) as num_players FROM players GROUP BY hand
SELECT hand, COUNT(*) as num_players FROM players GROUP BY hand
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured'
SELECT name, tonnage FROM ship ORDER BY name DESC
SELECT name, date, result FROM battle
SELECT MAX(death.killed) AS max_death_toll, MIN(death.killed) AS min_death_toll FROM battle JOIN ship ON battle.id = ship.id JOIN death ON ship.id = death.caused_by_ship_id
SELECT AVG(injured) AS avg_injuries FROM death JOIN ship ON death.caused_by_ship_id = ship.id
SELECT death.note, death.killed, death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't'
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril'
SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig' AND b.result = 'lost'
SELECT b.id, b.name FROM battle b JOIN ship s ON s.id = b.id JOIN death d ON d.caused_by_ship_id = s.id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10
SELECT s.id, s.name FROM ship s JOIN death d ON s.id = d.caused_by_ship_id GROUP BY s.id, s.name ORDER BY SUM(d.injured) DESC LIMIT 1
SELECT DISTINCT b.name AS battle_name FROM battle b WHERE b.bulgarian_commander = 'Kaloyan' AND b.latin_commander = 'Baldwin I'
SELECT COUNT(DISTINCT result) AS num_results FROM battle
SELECT COUNT(DISTINCT b.id) AS battles_without_losses FROM battle b LEFT JOIN ( SELECT DISTINCT l.id FROM ship l WHERE l.tonnage = 225 AND l.lost_in_battle = 1 ) AS lost_ships ON b.id = lost_ships.id WHERE lost_ships.id IS NULL
SELECT b.name, b.date FROM battle b JOIN ship s1 ON s1.name = 'Lettice' AND s1.lost_in_battle = b.id JOIN ship s2 ON s2.name = 'HMS Atalanta' AND s2.lost_in_battle = b.id
SELECT b.name, b.result, b.bulgarian_commander FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE b.location = 'English Channel' AND s.id IS NULL
SELECT note FROM death WHERE note LIKE '%East%' AND caused_by_ship_id IN ( SELECT id FROM ship WHERE lost_in_battle = true )
SELECT line_1, line_2 FROM Addresses
SELECT line_1, line_2 FROM Addresses
SELECT COUNT(*) AS total_courses FROM Courses
SELECT COUNT(*) AS num_courses FROM Courses
SELECT course_description FROM Courses WHERE course_name = 'Math'
SELECT course_description FROM Courses WHERE course_name LIKE '%math%'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea'
SELECT Departments.department_id, Departments.department_name FROM Departments JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY Departments.department_id, Departments.department_name ORDER BY COUNT(Degree_Programs.degree_program_id) DESC LIMIT 1
SELECT Departments.department_id, Departments.department_name FROM Departments INNER JOIN Degree_Programs ON Departments.department_id = Degree_Programs.department_id GROUP BY Departments.department_id, Departments.department_name ORDER BY COUNT(Degree_Programs.degree_program_id) DESC LIMIT 1
SELECT COUNT(DISTINCT department_id) AS num_departments FROM Degree_Programs
SELECT COUNT(DISTINCT department_id) AS num_departments_with_degrees FROM Degree_Programs
SELECT COUNT(DISTINCT degree_summary_name) AS num_degree_names FROM Degree_Programs
SELECT COUNT(DISTINCT degree_program_id) AS num_degrees FROM Degree_Programs
SELECT COUNT(DISTINCT degree_program_id) AS num_degrees FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering')
SELECT COUNT(DISTINCT degree_program_id) AS num_degrees FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering')
SELECT section_name, section_description FROM Sections
SELECT section_name, section_description FROM Sections
SELECT course_id, course_name FROM Courses WHERE course_id IN ( SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(*) <= 2 )
SELECT course_id, course_name FROM Courses WHERE course_id IN ( SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(*) < 2 )
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT section_name FROM Sections ORDER BY section_name DESC
SELECT Semesters.semester_name, Semesters.semester_id, COUNT(Student_Enrolment.student_id) AS num_students_registered FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_id ORDER BY num_students_registered DESC LIMIT 1
SELECT s.semester_name, s.semester_id, s1.course_name, s1.course_id FROM Semesters s INNER JOIN Student_Enrolment se ON s.semester_id = se.semester_id INNER JOIN Student_Enrolment_Courses sec ON se.student_enrolment_id = sec.student_enrolment_id INNER JOIN Students st ON se.student_id = st.student_id INNER JOIN Courses s1 ON sec.course_id = s1.course_id GROUP BY s.semester_name, s.semester_id, s1.course_name, s1.course_id HAVING COUNT(st.student_id) = ( SELECT MAX(student_count) FROM ( SELECT COUNT(st.student_id) as student_count FROM Semesters s2 INNER JOIN Student_Enrolment se2 ON s2.semester_id = se2.semester_id INNER JOIN Student_Enrolment_Courses sec2 ON se2.student_enrolment_id = sec2.student_enrolment_id INNER JOIN Students st ON se2.student_id = st.student_id GROUP BY s2.semester_id, sec2.course_id ) subquery )
SELECT department_description FROM Departments WHERE department_name LIKE '%the computer%'
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s INNER JOIN Student_Enrolment se ON s.student_id = se.student_id INNER JOIN Student_Enrolment_Courses sec ON se.student_enrolment_id = sec.student_enrolment_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(DISTINCT se.degree_program_id) = 2
SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM Students s INNER JOIN Student_Enrolment se ON s.student_id = se.student_id INNER JOIN Student_Enrolment_Courses sec ON se.student_enrolment_id = sec.student_enrolment_id INNER JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(DISTINCT dp.degree_program_id) = 2 AND COUNT(DISTINCT se.semester_id) = 1
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelor'
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelors'
SELECT dp.degree_summary_name, COUNT(*) AS num_students FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_summary_name ORDER BY num_students DESC LIMIT 1
SELECT dp.degree_summary_name, COUNT(*) AS num_students FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_summary_name ORDER BY num_students DESC LIMIT 1
SELECT dp.degree_program_id, dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(se.student_id) DESC LIMIT 1
SELECT degree_program_id, degree_summary_name FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id GROUP BY degree_program_id, degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS num_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY num_enrollments DESC LIMIT 1
SELECT s.first_name, s.middle_name, s.last_name, s.student_id, COUNT(*) AS num_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY num_enrollments DESC LIMIT 1
SELECT semester_name FROM Semesters WHERE semester_id NOT IN ( SELECT semester_id FROM Student_Enrolment )
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)
SELECT DISTINCT Courses.course_name FROM Courses INNER JOIN Sections ON Courses.course_id = Sections.course_id INNER JOIN Student_Enrolment_Courses ON Sections.section_id = Student_Enrolment_Courses.course_id
SELECT DISTINCT Courses.course_name FROM Courses INNER JOIN Sections ON Courses.course_id = Sections.course_id INNER JOIN Student_Enrolment_Courses ON Sections.section_id = Student_Enrolment_Courses.course_id
SELECT Courses.course_name FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id JOIN Student_Enrolment_Courses ON Sections.section_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_name ORDER BY COUNT(Student_Enrolment_Courses.student_enrolment_id) DESC LIMIT 1
SELECT Courses.course_name FROM Courses JOIN Sections ON Courses.course_id = Sections.course_id JOIN Student_Enrolment_Courses ON Sections.section_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_name ORDER BY COUNT(Student_Enrolment_Courses.student_enrolment_id) DESC LIMIT 1
SELECT s.last_name FROM Students s JOIN Addresses a ON s.current_address_id = a.address_id WHERE a.state_province_county = 'North Carolina' AND s.student_id NOT IN (SELECT se.student_id FROM Student_Enrolment se)
SELECT Students.last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id LEFT JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id WHERE Addresses.state_province_county = 'North Carolina' AND Student_Enrolment.student_enrolment_id IS NULL
SELECT transcript_date, transcript_id FROM Transcripts WHERE transcript_id IN ( SELECT DISTINCT Transcript_Contents.transcript_id FROM Transcript_Contents GROUP BY Transcript_Contents.transcript_id HAVING COUNT(DISTINCT Transcript_Contents.student_course_id) >= 2 )
SELECT transcript_date, transcript_id FROM Transcripts INNER JOIN Transcript_Contents ON Transcripts.transcript_id = Transcript_Contents.transcript_id GROUP BY transcript_date, transcript_id HAVING COUNT(DISTINCT student_course_id) >= 2
SELECT Students.cell_mobile_number FROM Students WHERE Students.first_name = 'Timmothy' AND Students.last_name = 'Ward'
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward'
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Transcripts t ON se.student_enrolment_id = t.transcript_id ORDER BY t.transcript_date LIMIT 1
SELECT s.first_name AS first_name, s.middle_name AS middle_name, s.last_name AS last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Transcripts t ON se.student_enrolment_id = t.transcript_id ORDER BY t.transcript_date ASC LIMIT 1
SELECT s.first_name FROM Students s JOIN Addresses pa ON s.permanent_address_id = pa.address_id JOIN Addresses ca ON s.current_address_id = ca.address_id WHERE pa.line_1 <> ca.line_1 OR pa.line_2 <> ca.line_2 OR pa.line_3 <> ca.line_3 OR pa.city <> ca.city OR pa.zip_postcode <> ca.zip_postcode OR pa.state_province_county <> ca.state_province_county OR pa.country <> ca.country OR pa.other_address_details <> ca.other_address_details
SELECT s.first_name FROM Students s JOIN Addresses a1 ON s.current_address_id = a1.address_id JOIN Addresses a2 ON s.permanent_address_id = a2.address_id WHERE a1.line_1 <> a2.line_1 OR a1.line_2 <> a2.line_2 OR a1.line_3 <> a2.line_3 OR a1.city <> a2.city OR a1.zip_postcode <> a2.zip_postcode OR a1.state_province_county <> a2.state_province_county OR a1.country <> a2.country OR a1.other_address_details <> a2.other_address_details
SELECT current_address_id AS address_id, line_1, line_2, line_3 FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id GROUP BY current_address_id ORDER BY COUNT(*) DESC LIMIT 1
SELECT a.address_id, a.line_1, a.line_2 FROM Addresses a INNER JOIN Students s ON a.address_id = s.current_address_id INNER JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY a.address_id, a.line_1, a.line_2 ORDER BY COUNT(DISTINCT se.student_enrolment_id) DESC LIMIT 1
SELECT AVG(transcript_date) AS average_print_date FROM Transcripts
SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date LIMIT 1
SELECT MIN(transcript_date) AS earliest_transcript_date, other_details FROM Transcripts GROUP BY other_details
SELECT COUNT(DISTINCT transcript_id) AS num_transcripts FROM Transcripts
SELECT COUNT(*) AS num_transcripts FROM Transcripts
SELECT MAX(transcript_date) AS last_transcript_release_date FROM Transcripts
SELECT MAX(transcript_date) AS last_transcript_date FROM Transcripts
SELECT COUNT(*) AS max_enrollment_count, student_course_id FROM Student_Enrolment_Courses GROUP BY student_course_id ORDER BY max_enrollment_count DESC LIMIT 1
SELECT MAX(course_count) AS max_course_count, course_id, student_enrolment_id FROM ( SELECT COUNT(*) AS course_count, course_id, se.student_enrolment_id FROM Student_Enrolment_Courses sec JOIN Student_Enrolment se ON sec.student_enrolment_id = se.student_enrolment_id GROUP BY course_id, se.student_enrolment_id ) AS course_counts GROUP BY course_id ORDER BY max_course_count DESC LIMIT 1
SELECT transcript_date, transcript_id FROM Transcripts WHERE transcript_id IN ( SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id ORDER BY COUNT(*) ASC LIMIT 1 )
SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN ( SELECT transcript_id FROM Transcript_Contents GROUP BY transcript_id HAVING COUNT(*) = ( SELECT MIN(result_count) FROM ( SELECT transcript_id, COUNT(*) AS result_count FROM Transcript_Contents GROUP BY transcript_id ) AS result_counts ) )
SELECT DISTINCT semester_name FROM Semesters INNER JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id INNER JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id INNER JOIN Students ON Student_Enrolment.student_id = Students.student_id WHERE Degree_Programs.degree_summary_name IN ('Master', 'Bachelor') GROUP BY semester_name HAVING COUNT(DISTINCT Degree_Programs.degree_summary_name) = 2
SELECT se.semester_id FROM Student_Enrolment se INNER JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY se.semester_id HAVING COUNT(DISTINCT dp.degree_summary_name) = 2
SELECT COUNT(DISTINCT current_address_id) AS num_different_addresses FROM Students ``` This query selects the distinct `current_address_id` values from the `Students` table and counts the number of unique addresses. The result will be the number of different addresses that the students currently live.
SELECT DISTINCT line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM Addresses WHERE address_id IN (SELECT current_address_id FROM Students UNION SELECT permanent_address_id FROM Students)
SELECT * FROM Students ORDER BY last_name DESC, first_name DESC
SELECT * FROM Students ORDER BY last_name DESC
SELECT * FROM Sections WHERE section_name = 'h.'
SELECT section_description FROM Sections WHERE section_name = 'h'
SELECT first_name FROM Students WHERE permanent_address_id IN ( SELECT address_id FROM Addresses WHERE country = 'Haiti' ) OR cell_mobile_number = '09700166582'
SELECT first_name FROM Students WHERE permanent_address_id IN ( SELECT address_id FROM Addresses WHERE country = 'Haiti' ) OR cell_mobile_number = '09700166582'
SELECT Title FROM Cartoon ORDER BY Title ASC
SELECT Title FROM Cartoon ORDER BY Title ASC
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'
SELECT COUNT(*) AS num_cartoons FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT COUNT(*) AS num_cartoons FROM Cartoon WHERE Written_by = 'Joseph Kuhr'
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon JOIN TV_series ON Cartoon.id = TV_series.id ORDER BY TV_series.Air_Date ASC
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon JOIN TV_series ON Cartoon.id = TV_series.id ORDER BY TV_series.Air_Date
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'
SELECT Title FROM Cartoon WHERE Directed_by IN ('Ben Jones', 'Brandon Vietti')
SELECT Country, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Country ORDER BY num_channels DESC LIMIT 1
SELECT Country, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Country ORDER BY num_channels DESC LIMIT 1
SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT Content) FROM TV_Channel
SELECT COUNT(DISTINCT series_name, Content) AS Total FROM TV_Channel
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT Content FROM TV_series WHERE series_name = 'Sky Radio'
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio'
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'
SELECT COUNT(DISTINCT Channel) AS Num_Channels FROM TV_Channel WHERE Language = 'English'
SELECT Language, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Language ORDER BY Number_of_TV_Channels ASC LIMIT 1
SELECT Language, COUNT(DISTINCT Channel) AS Num_Channels FROM ( SELECT Language, Channel FROM TV_Channel UNION ALL SELECT Language, Channel FROM TV_series UNION ALL SELECT NULL AS Language, Channel FROM Cartoon ) AS All_Channels WHERE Language IS NOT NULL GROUP BY Language ORDER BY Num_Channels ASC LIMIT 1
SELECT Language, COUNT(*) AS Num_Channels FROM TV_Channel GROUP BY Language
SELECT Language, COUNT(DISTINCT Channel) AS Num_Channels FROM TV_Channel GROUP BY Language
SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = "The Rise of the Blue Beetle!"
SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = 'The Rise of the Blue Beetle'
SELECT Cartoon.Title FROM Cartoon INNER JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'
SELECT c.Title FROM Cartoon c JOIN TV_Channel tc ON c.Channel = tc.id WHERE tc.series_name = "Sky Radio"
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC
SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC
SELECT TV_series.Episode, TV_series.Rating, TV_series.Channel FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3
SELECT MIN(Share) AS Minimum_Share, MAX(Share) AS Maximum_Share FROM TV_series
SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM TV_series
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime'
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime'
SELECT TV_Channel.series_name, TV_Channel.Channel FROM TV_Channel INNER JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = 'A Love of a Lifetime'
SELECT series_name FROM TV_Channel INNER JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE Episode = 'A Love of a Lifetime'
SELECT TV_series.Episode FROM TV_series INNER JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio'
SELECT Episode FROM TV_series WHERE Channel = 'Sky Radio'
SELECT Directed_by, COUNT(*) AS num_cartoons FROM Cartoon GROUP BY Directed_by
SELECT Directed_by, COUNT(*) AS num_cartoons FROM Cartoon GROUP BY Directed_by
SELECT Production_code, Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)
SELECT Production_code, Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)
SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes'
SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes'
SELECT DISTINCT Country FROM TV_Channel WHERE id IN ( SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey' )
SELECT DISTINCT Country FROM Cartoon WHERE Written_by = 'Todd Casey'
SELECT DISTINCT Country FROM TV_Channel WHERE Country NOT IN (SELECT DISTINCT Country FROM Cartoon WHERE Written_by = 'Todd Casey')
SELECT DISTINCT Country FROM TV_Channel WHERE Country NOT IN ( SELECT DISTINCT Country FROM Cartoon WHERE Written_by = 'Todd Casey' )
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel INNER JOIN TV_series ON TV_Channel.id = TV_series.Channel INNER JOIN Cartoon ON TV_series.id = Cartoon.Channel WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang')
SELECT c.Title, ch.Country FROM Cartoon c JOIN TV_Channel ch ON c.Channel = ch.id WHERE c.Directed_by IN ('Ben Jones', 'Michael Chang')
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English'
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English'
SELECT DISTINCT TV_Channel.id FROM TV_Channel WHERE TV_Channel.Country IN ( SELECT TV_Channel.Country FROM TV_Channel GROUP BY TV_Channel.Country HAVING COUNT(*) > 2 )
SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(*) > 2
SELECT c.id FROM TV_Channel c LEFT JOIN Cartoon ca ON c.id = ca.Channel WHERE ca.Directed_by <> 'Ben Jones' OR ca.Directed_by IS NULL
SELECT DISTINCT c.id FROM TV_Channel c LEFT JOIN Cartoon ca ON c.id = ca.Channel WHERE ca.Directed_by <> 'Ben Jones' OR ca.Directed_by IS NULL
SELECT c.Package_Option FROM TV_Channel c LEFT JOIN Cartoon ca ON c.id = ca.Channel WHERE ca.Directed_by <> 'Ben Jones' OR ca.Directed_by IS NULL
SELECT DISTINCT c.Package_Option FROM TV_Channel c LEFT JOIN Cartoon ca ON c.id = ca.Channel WHERE ca.Directed_by != 'Ben Jones' OR ca.Directed_by IS NULL
SELECT COUNT(DISTINCT Poker_Player_ID) AS Num_Poker_Players FROM poker_player
SELECT COUNT(*) AS num_poker_players FROM poker_player
SELECT pp.Earnings FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC
SELECT pp.Earnings FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC
SELECT poker_player.Final_Table_Made, poker_player.Best_Finish, people.Name AS Player_Name FROM poker_player INNER JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Best_Finish DESC
SELECT p.Name, pp.Final_Table_Made, pp.Best_Finish FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID
SELECT AVG(Earnings) AS Average_Earnings FROM poker_player
SELECT AVG(Earnings) AS Average_Earnings FROM poker_player
SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)
SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)
SELECT MAX(Final_Table_Made) AS Max_Final_Tables FROM poker_player WHERE Earnings < 200000
SELECT MAX(Final_Table_Made) AS Max_Final_Tables FROM poker_player WHERE Earnings < 200000
SELECT Name FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID
SELECT Name FROM people
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000
SELECT p.Name AS Player_Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000
SELECT p.Name AS Player_Name, COUNT(*) AS Final_Tables_Made FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID GROUP BY pp.People_ID ORDER BY Final_Tables_Made ASC
SELECT p.Name AS Player_Name, COUNT(*) AS Final_Tables_Made FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID GROUP BY pp.People_ID ORDER BY Final_Tables_Made ASC
SELECT p.Birth_Date FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player) LIMIT 1
SELECT p.Birth_Date FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player)
SELECT Money_Rank FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID WHERE pe.Height = (SELECT MAX(Height) FROM people)
SELECT Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height = (SELECT MAX(Height) FROM people)
SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200
SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC
SELECT people.Name, poker_player.Earnings FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC
SELECT Nationality, COUNT(*) AS Number_of_People FROM people GROUP BY Nationality
SELECT Nationality, COUNT(*) as Count FROM people GROUP BY Nationality
SELECT Nationality, COUNT(*) AS Count FROM people GROUP BY Nationality ORDER BY Count DESC LIMIT 1
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(People_ID) >= 2
SELECT Name, Birth_Date FROM people ORDER BY Name ASC
SELECT Name, Birth_Date FROM people ORDER BY Name ASC
SELECT Name FROM people WHERE Nationality <> 'Russia'
SELECT Name FROM people WHERE Nationality <> 'Russia'
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
SELECT COUNT(DISTINCT Nationality) AS distinct_nationalities FROM people
SELECT COUNT(DISTINCT Nationality) AS num_of_nationalities FROM people
SELECT COUNT(DISTINCT state) AS num_states FROM AREA_CODE_STATE UNION SELECT COUNT(DISTINCT state) AS num_states FROM VOTES
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC
SELECT vote_id, phone_number, state FROM VOTES
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE
SELECT MAX(created) AS last_date_created FROM VOTES WHERE state = 'CA'
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway'
SELECT DISTINCT state, created FROM VOTES
SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (SELECT contestant_number FROM VOTES GROUP BY contestant_number HAVING COUNT(*) >= 2)
SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN VOTES v ON c.contestant_number = v.contestant_number WHERE v.created IS NOT NULL GROUP BY c.contestant_number, c.contestant_name ORDER BY COUNT(v.vote_id) LIMIT 1
SELECT COUNT(*) AS num_votes FROM VOTES WHERE state = 'NY' OR state = 'CA'
SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)
SELECT LEFT(phone_number, 3) AS area_code, COUNT(*) AS vote_count FROM VOTES GROUP BY LEFT(phone_number, 3) ORDER BY vote_count DESC LIMIT 1
SELECT V.created, V.state, V.phone_number FROM VOTES V JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Tabatha Gehling'
SELECT ACS.area_code FROM AREA_CODE_STATE ACS JOIN VOTES V1 ON ACS.state = V1.state JOIN VOTES V2 ON V1.phone_number = V2.phone_number AND V1.state = V2.state JOIN CONTESTANTS C1 ON V1.contestant_number = C1.contestant_number AND C1.contestant_name = 'Tabatha Gehling' JOIN CONTESTANTS C2 ON V2.contestant_number = C2.contestant_number AND C2.contestant_name = 'Kelly Clauss' GROUP BY ACS.area_code HAVING COUNT(DISTINCT V1.phone_number) > 1
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'
SELECT Name FROM country WHERE IndepYear > 1950
SELECT Name FROM country WHERE IndepYear > 1950
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic'
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic'
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region = 'Caribbean'
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent = 'North America' AND Region = 'Caribbean'
SELECT Continent FROM country WHERE Code = 'AIA'
SELECT c.Continent FROM country c JOIN city ct ON c.Code = ct.CountryCode WHERE ct.Name = 'Anguilla'
SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul'
SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul'
SELECT cl.Language FROM countrylanguage cl JOIN city c ON cl.CountryCode = c.CountryCode WHERE c.Name = 'Aruba' ORDER BY cl.Percentage DESC LIMIT 1
SELECT Language FROM countrylanguage WHERE CountryCode IN ( SELECT Code FROM country WHERE Name = 'Aruba' ) AND IsOfficial = 'T'
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'
SELECT Region, Population FROM country WHERE Name = 'Angola'
SELECT country.Region, SUM(city.Population) AS AngolaPopulation FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Name = 'Angola' GROUP BY country.Region
SELECT AVG(LifeExpectancy) AS AvgLifeExpectancy FROM countryWHERE Region = 'Central Africa'
SELECT AVG(LifeExpectancy) AS AvgLifeExpectancy FROM country WHERE Region = 'Central Africa'
SELECT c.Name FROM country c WHERE c.Continent = 'Asia' ORDER BY c.LifeExpectancy ASC LIMIT 1
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1
SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS MaximumGNP FROM country WHERE Continent = 'Asia'
SELECT COUNT(*) AS total_people, MAX(GNP) AS largest_GNP FROM country JOIN city ON country.Code = city.CountryCode WHERE country.Continent = 'Asia'
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe')
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe')
SELECT SUM(Population) FROM city WHERE District = 'Gelderland'
SELECT SUM(city.Population) AS total_population FROM city JOIN country ON city.CountryCode = country.Code WHERE city.District = 'Gelderland'
SELECT AVG(country.GNP) AS average_GNP, SUM(country.Population) AS total_population FROM country JOIN city ON country.Code = city.CountryCode WHERE country.GovernmentForm = 'US territory'
SELECT AVG(GNP) AS Mean_GNP, SUM(Population) AS Total_Population FROM country WHERE Continent = 'North America' AND Code IN ( SELECT DISTINCT CountryCode FROM city WHERE CountryCode = 'USA' )
SELECT COUNT(DISTINCT Language) AS UniqueLanguages FROM countrylanguage
SELECT COUNT(DISTINCT Language) AS NumDistinctLanguages FROM countrylanguage
SELECT COUNT(DISTINCT GovernmentForm) AS Num_Governments FROM country WHERE Continent = 'Africa'
SELECT COUNT(DISTINCT GovernmentForm) AS NumFormsOfGovt FROM country WHERE Continent = 'Africa'
SELECT COUNT(DISTINCT Language) AS TotalLanguages FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT COUNT(DISTINCT Language) AS NumLanguages FROM countrylanguage WHERE CountryCode = 'ABW'
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = true
SELECT COUNT(*) AS num_official_languages FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Name = 'Afghanistan' AND cl.IsOfficial = 'T'
SELECT country.Name AS CountryName FROM country JOIN ( SELECT CountryCode, COUNT(*) AS NumLanguages FROM countrylanguage GROUP BY CountryCode ORDER BY NumLanguages DESC LIMIT 1 ) AS top_country_languages ON country.Code = top_country_languages.CountryCode
SELECT country.Name AS Nation, COUNT(DISTINCT countrylanguage.Language) AS NumLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code ORDER BY NumLanguages DESC LIMIT 1
SELECT country.Continent, COUNT(DISTINCT countrylanguage.Language) AS num_languages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Continent ORDER BY num_languages DESC LIMIT 1
SELECT continent, COUNT(DISTINCT language) AS num_languages FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code GROUP BY continent ORDER BY num_languages DESC LIMIT 1
SELECT COUNT(DISTINCT c1.Name) FROM countrylanguage cl1 JOIN countrylanguage cl2 ON cl1.CountryCode = cl2.CountryCode JOIN country c1 ON cl1.CountryCode = c1.Code JOIN country c2 ON cl2.CountryCode = c2.Code WHERE cl1.Language = 'English' AND cl2.Language = 'Dutch'
SELECT COUNT(DISTINCT c1.Code) FROM countrylanguage cl1 JOIN countrylanguage cl2 ON cl1.CountryCode = cl2.CountryCode JOIN country c1 ON cl1.CountryCode = c1.Code JOIN country c2 ON cl2.CountryCode = c2.Code WHERE cl1.Language = 'English' AND cl2.Language = 'Dutch'
SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French') GROUP BY c.Name HAVING COUNT(DISTINCT cl.Language) = 2
SELECT c.Name FROM country c INNER JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French') GROUP BY c.Name HAVING COUNT(DISTINCT cl.Language) = 2
SELECT c.Name FROM country c INNER JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode INNER JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl1.IsOfficial = 'T' AND cl2.Language = 'French' AND cl2.IsOfficial = 'T'
SELECT DISTINCT c.Name FROM country c INNER JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French') AND cl.IsOfficial = 'T'
SELECT COUNT(DISTINCT Continent) AS distinct_continents FROM country INNER JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'Chinese'
SELECT COUNT(DISTINCT c.Continent) FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Chinese' AND cl.IsOfficial = 'T'
SELECT DISTINCT c.Region FROM country c INNER JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch')
SELECT DISTINCT region FROM country WHERE region IN ('Dutch', 'English')
SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T' ORDER BY c.Name
SELECT DISTINCT c.Name FROM country c INNER JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T'
SELECT cl.Language, SUM(cl.Percentage) AS TotalPercentage FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' AND cl.IsOfficial = 'T' GROUP BY cl.Language ORDER BY TotalPercentage DESC LIMIT 1
SELECT Language FROM countrylanguage WHERE CountryCode IN ( SELECT Code FROM country WHERE Continent = 'Asia' ) GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1
SELECT DISTINCT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' GROUP BY cl.Language HAVING COUNT(DISTINCT c.Code) = 1
SELECT DISTINCT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' GROUP BY cl.Language HAVING COUNT(DISTINCT c.Code) = 1
SELECT city.Name, MAX(city.Population) AS Population FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T' GROUP BY city.Name ORDER BY Population DESC LIMIT 1
SELECT city.Name, MAX(city.Population) AS Population FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' AND countrylanguage.IsOfficial = 'T' GROUP BY city.Name ORDER BY Population DESC LIMIT 1
SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1
SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1
SELECT AVG(LifeExpectancy) AS average_life_expectancy FROM country WHERE Code NOT IN ( SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T' )
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')
SELECT SUM(c.Population) AS TotalPopulation FROM country c WHERE c.Code NOT IN (SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'English')
SELECT COUNT(DISTINCT c.ID) AS num_people FROM city c JOIN country co ON c.CountryCode = co.Code LEFT JOIN countrylanguage cl ON co.Code = cl.CountryCode WHERE cl.Language <> 'English' OR cl.Language IS NULL
SELECT Language FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode = (SELECT Code FROM country WHERE HeadOfState = 'Beatrix')
SELECT countrylanguage.Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.HeadOfState = 'Beatrix' AND countrylanguage.IsOfficial = 'T'
SELECT COUNT(DISTINCT cl.Language) as TotalLanguages FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.IndepYear < 1930
SELECT COUNT(DISTINCT(countrylanguage.Language)) AS TotalLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.IndepYear < 1930
SELECT c.Name FROM country c WHERE c.SurfaceArea > (SELECT MAX(c2.SurfaceArea) FROM country c2 WHERE c2.Continent = 'Europe')
SELECT Name FROM country WHERE SurfaceArea > ( SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe' )
SELECT c1.Name FROM country c1 WHERE c1.Continent = 'Africa' AND c1.Population < (SELECT MIN(c2.Population) FROM country c2 WHERE c2.Continent = 'Asia')
SELECT c1.Name FROM country c1 WHERE Continent = 'Africa' AND Population < ( SELECT MIN(Population) FROM country c2 WHERE c2.Continent = 'Asia' )
SELECT c1.Name FROM country c1 WHERE c1.Continent = 'Asia' AND c1.Population > (SELECT MAX(c2.Population) FROM country c2 WHERE c2.Continent = 'Africa')
SELECT c1.Name FROM country c1 WHERE c1.Continent = 'Asia' AND c1.Population > ( SELECT MAX(c2.Population) FROM country c2 WHERE c2.Continent = 'Africa' )
SELECT DISTINCT Code FROM country WHERE Code NOT IN ( SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language = 'English' )
SELECT DISTINCT Code FROM country WHERE Code NOT IN ( SELECT CountryCode FROM countrylanguage WHERE Language = 'English' )
SELECT DISTINCT Code FROM country WHERE Code NOT IN ( SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language = 'English' )
SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language != 'English'
SELECT DISTINCT c.Code FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language <> 'English' AND c.GovernmentForm <> 'Republic'
SELECT c.Code FROM country c LEFT JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English' AND c.GovernmentForm != 'Republic'
SELECT c.Name AS City FROM city c JOIN country co ON c.CountryCode = co.Code WHERE co.Continent = 'Europe' AND co.Language <> 'English' AND co.IsOfficial = 'T' ORDER BY c.Name
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English' AND countrylanguage.IsOfficial = 'T'
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'
SELECT c.Name, c.IndepYear, c.SurfaceArea FROM country c ORDER BY c.Population ASC LIMIT 1
SELECT c.Name, c.IndepYear, c.SurfaceArea FROM country c WHERE c.Population = (SELECT MIN(Population) FROM country)
SELECT c.Population, c.Name, c.HeadOfState FROM country c WHERE c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)
SELECT c.Name, c.Population, c.HeadOfState FROM country c WHERE c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country)
SELECT country.Name, COUNT(countrylanguage.Language) AS NumLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code HAVING COUNT(countrylanguage.Language) >= 3
SELECT country.Name, COUNT(countrylanguage.Language) AS NumLanguages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(DISTINCT countrylanguage.Language) > 2
SELECT District, COUNT(Name) AS NumCities FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District
SELECT District, COUNT(Name) AS Num_Cities FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District
SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm
SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm
SELECT continent, AVG(lifeexpectancy) AS avg_life_expectancy, SUM(population) AS total_population FROM country WHERE lifeexpectancy < 72 GROUP BY continent
SELECT c.Continent, SUM(c.Population) AS TotalPopulation, AVG(c.LifeExpectancy) AS AverageLifeExpectancy FROM country c WHERE c.LifeExpectancy < 72 GROUP BY c.Continent
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
SELECT Name FROM country ORDER BY Population DESC LIMIT 3
SELECT Name FROM country ORDER BY Population DESC LIMIT 3
SELECT Name FROM country ORDER BY Population ASC LIMIT 3
SELECT Name FROM country ORDER BY Population LIMIT 3
SELECT COUNT(*) FROM country WHERE Continent = 'Asia'
SELECT COUNT(*) FROM country WHERE Continent = 'Asia'
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000
SELECT SUM(country.Population) AS total_population, AVG(country.SurfaceArea) AS avg_area FROM country WHERE country.Continent = 'North America' AND country.SurfaceArea > 3000
SELECT SUM(c.Population) AS TotalPopulation, AVG(c.SurfaceArea) AS AvgSurfaceArea FROM country c WHERE c.Continent = 'North America' AND c.SurfaceArea > 3000
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000
SELECT Language, COUNT(DISTINCT CountryCode) AS NumCountries FROM countrylanguage GROUP BY Language ORDER BY NumCountries DESC LIMIT 1
SELECT Language, COUNT(DISTINCT CountryCode) AS NumCountries FROM countrylanguage GROUP BY Language ORDER BY NumCountries DESC LIMIT 1
SELECT c.Name AS Country, cl.Language AS Language, cl.Percentage AS Percentage FROM country c JOIN ( SELECT CountryCode, Language, Percentage, ROW_NUMBER() OVER (PARTITION BY CountryCode ORDER BY Percentage DESC) AS rn FROM countrylanguage WHERE IsOfficial = 'T' ) cl ON c.Code = cl.CountryCode AND cl.rn = 1 ORDER BY c.Name
SELECT country.Code, countrylanguage.Language FROM country JOIN ( SELECT CountryCode, Language FROM countrylanguage WHERE Percentage = ( SELECT MAX(Percentage) FROM countrylanguage WHERE CountryCode = countrylanguage.CountryCode ) ) AS max_percentage ON country.Code = max_percentage.CountryCode
SELECT COUNT(*) as TotalCountries FROM ( SELECT c.Name, c.Population, MAX(cl.Percentage) as MaxPercentage FROM country c INNER JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Spanish' GROUP BY c.Name, c.Population ) as subquery WHERE subquery.MaxPercentage = ( SELECT MAX(cl.Percentage) FROM countrylanguage cl WHERE cl.Language = 'Spanish' )
SELECT COUNT(DISTINCT cl.CountryCode) FROM countrylanguage cl WHERE cl.Language = 'Spanish' AND cl.Percentage > 50
SELECT cl.CountryCode FROM countrylanguage cl JOIN ( SELECT CountryCode, MAX(Percentage) AS MaxPercentage FROM countrylanguage WHERE Language = 'Spanish' GROUP BY CountryCode ) AS max_cl ON cl.CountryCode = max_cl.CountryCode AND cl.Percentage = max_cl.MaxPercentage ORDER BY cl.Percentage DESC LIMIT 1
SELECT Code FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage GROUP BY CountryCode HAVING MAX(Percentage) > 50 AND Language = 'Spanish')
SELECT COUNT(*) AS conductor_count FROM conductor
SELECT COUNT(*) AS Number_of_Conductors FROM conductor
SELECT Name FROM conductor ORDER BY Age ASC
SELECT Name FROM conductor ORDER BY Age
SELECT Name FROM conductor WHERE Nationality <> 'USA'
SELECT Name FROM conductor WHERE Nationality <> 'USA'
SELECT Record_Company, MAX(Year_of_Founded) AS Founded_Year FROM orchestra GROUP BY Record_Company ORDER BY Founded_Year DESC
SELECT Record_Company, Year_of_Founded FROM orchestra JOIN conductor ON orchestra.Conductor_ID = conductor.Conductor_ID WHERE Major_Record_Format = 'orchestra' ORDER BY Year_of_Founded DESC
SELECT AVG(Attendance) AS Average_Attendance FROM show
SELECT AVG(Attendance) AS Average_Attendance FROM show
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM performance WHERE Type != 'Live final'
SELECT MAX(Share) AS Max_Share, MIN(Share) AS Min_Share FROM performance WHERE Type <> 'Live final'
SELECT COUNT(DISTINCT Nationality) FROM conductor
SELECT COUNT(DISTINCT Nationality) AS Num_Nationalities FROM conductor
SELECT Name, Year_of_Work FROM conductor ORDER BY Year_of_Work DESC
SELECT Name, COUNT(Year_of_Work) AS Years_Worked FROM conductor GROUP BY Name ORDER BY Years_Worked DESC
SELECT Name FROM conductor WHERE Year_of_Work = ( SELECT MAX(Year_of_Work) FROM conductor )
SELECT Name FROM conductor WHERE Year_of_Work = ( SELECT MAX(Year_of_Work) FROM conductor )
SELECT c.Name AS Conductor_Name, o.Orchestra AS Orchestra_Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID
SELECT conductor.Name, orchestra.Orchestra FROM conductor INNER JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID
SELECT c.Name FROM conductor c INNER JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID, c.Name HAVING COUNT(DISTINCT o.Orchestra_ID) > 1
SELECT c.Name FROM conductor c INNER JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID HAVING COUNT(DISTINCT o.Orchestra_ID) > 1
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID, c.Name ORDER BY COUNT(o.Orchestra_ID) DESC LIMIT 1
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY c.Conductor_ID ORDER BY COUNT(DISTINCT o.Orchestra_ID) DESC LIMIT 1
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Num_Of_Orchestras FROM orchestra GROUP BY Record_Company
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Num_Of_Orchestras FROM orchestra GROUP BY Record_Company
SELECT Orchestra, COUNT(*) AS Count_of_Records FROM orchestra GROUP BY Orchestra ORDER BY Count_of_Records ASC
SELECT Major_Record_Format, COUNT(*) AS Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(DISTINCT Orchestra_ID) DESC LIMIT 1
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(DISTINCT Orchestra_ID) DESC LIMIT 1
SELECT orchestra.Orchestra FROM orchestra LEFT JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID WHERE performance.Performance_ID IS NULL
SELECT o.Orchestra_ID, o.Orchestra FROM orchestra o LEFT JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID WHERE p.Performance_ID IS NULL
SELECT DISTINCT o1.Record_Company FROM orchestra o1 JOIN orchestra o2 ON o1.Record_Company = o2.Record_Company WHERE o1.Year_of_Founded < 2003 AND o2.Year_of_Founded > 2003
SELECT DISTINCT o1.Record_Company FROM orchestra o1 JOIN orchestra o2 ON o1.Record_Company = o2.Record_Company WHERE o1.Year_of_Founded < 2003 AND o2.Year_of_Founded > 2003
SELECT COUNT(DISTINCT orchestra.Orchestra_ID) FROM orchestra WHERE orchestra.Major_Record_Format IN ('CD', 'DVD')
SELECT COUNT(DISTINCT orchestra.Orchestra_ID) FROM orchestra WHERE orchestra.Major_Record_Format IN ('CD', 'DVD')
SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN ( SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(*) > 1 ) ORDER BY Year_of_Founded
SELECT DISTINCT o.Year_of_Founded FROM orchestra o INNER JOIN performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Year_of_Founded HAVING COUNT(DISTINCT p.Performance_ID) > 1
SELECT COUNT(*) FROM Highschooler WHERE grade = 'HS'
SELECT COUNT(*) FROM Highschooler WHERE grade = '9' OR grade = '10' OR grade = '11' OR grade = '12'
SELECT name, grade FROM Highschooler
SELECT Highschooler.name, Highschooler.grade FROM Highschooler
SELECT grade FROM Highschooler
SELECT ID, name, grade FROM Highschooler
SELECT grade FROM Highschooler WHERE name = 'Kyle'
SELECT grade FROM Highschooler WHERE name = 'Kyle'
SELECT name FROM Highschooler WHERE grade = 10
SELECT name FROM Highschooler WHERE grade = 10
SELECT ID FROM Highschooler WHERE name = 'Kyle'
SELECT ID FROM Highschooler WHERE name = 'Kyle'
SELECT COUNT(*) AS num_highschoolers FROM Highschooler WHERE grade IN (9, 10)
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10)
SELECT grade, COUNT(*) AS num_highschoolers FROM Highschooler GROUP BY grade
SELECT grade, COUNT(*) AS count FROM Highschooler GROUP BY grade
SELECT grade, COUNT(*) AS num_highschoolers FROM Highschooler GROUP BY grade ORDER BY num_highschoolers DESC LIMIT 1
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(ID) DESC LIMIT 1
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(DISTINCT ID) >= 4
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4
SELECT f.student_id, COUNT(f.friend_id) AS num_friends FROM Friend f GROUP BY f.student_id
SELECT Highschooler.name, COUNT(Friend.friend_id) AS num_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID ORDER BY num_friends DESC
SELECT Highschooler.name, COUNT(Friend.friend_id) AS num_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID ORDER BY num_friends DESC
SELECT Highschooler.name, COUNT(Friend.friend_id) AS num_friends FROM Highschooler LEFT JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID ORDER BY num_friends DESC
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID, h.name ORDER BY COUNT(f.friend_id) DESC LIMIT 1
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID ORDER BY COUNT(f.friend_id) DESC LIMIT 1
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID, h.name HAVING COUNT(f.friend_id) >= 3
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID, h.name HAVING COUNT(f.friend_id) >= 3
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.friend_id JOIN Highschooler k ON k.ID = f.student_id WHERE k.name = 'Kyle'
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.friend_id JOIN Highschooler k ON k.ID = f.student_id WHERE k.name = 'Kyle'
SELECT COUNT(*) AS num_friends FROM Highschooler h JOIN Friend f ON h.ID = f.student_id OR h.ID = f.friend_id WHERE h.name = 'Kyle'
SELECT COUNT(*) FROM Highschooler h JOIN Friend f ON h.ID = f.student_id WHERE h.name = 'Kyle'
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT DISTINCT student_id FROM Friend)
SELECT ID FROM Highschooler WHERE ID NOT IN ( SELECT student_id FROM Friend )
SELECT name FROM Highschooler WHERE ID NOT IN ( SELECT student_id FROM Friend )
SELECT H.name FROM Highschooler H WHERE H.ID NOT IN (SELECT F.student_id FROM Friend F)
SELECT DISTINCT f.student_id FROM Friend f JOIN Likes l ON f.friend_id = l.student_id WHERE f.student_id IN ( SELECT student_id FROM Friend ) AND f.student_id <> l.liked_id
SELECT DISTINCT h.ID FROM Highschooler h INNER JOIN Friend f ON h.ID = f.student_id INNER JOIN Likes l ON h.ID = l.student_id
SELECT DISTINCT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON h.ID = l.student_id WHERE f.friend_id IS NOT NULL AND l.liked_id <> h.ID
SELECT DISTINCT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON h.ID = l.student_id WHERE EXISTS (SELECT 1 FROM Friend f2 WHERE f2.student_id = h.ID) AND EXISTS (SELECT 1 FROM Likes l2 WHERE l2.student_id = h.ID)
SELECT student_id, COUNT(*) AS num_likes FROM Likes GROUP BY student_id
SELECT student_id, COUNT(liked_id) AS num_likes FROM Likes GROUP BY student_id
SELECT h.name, COUNT(l.liked_id) AS num_likes FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID HAVING COUNT(l.liked_id) > 0
SELECT Highschooler.name, COUNT(Likes.liked_id) AS num_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID HAVING num_likes > 0 AND Highschooler.grade = 'high' ORDER BY num_likes DESC
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID ORDER BY COUNT(Likes.liked_id) DESC LIMIT 1
SELECT Highschooler.name FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID ORDER BY COUNT(Likes.liked_id) DESC LIMIT 1
SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID HAVING COUNT(DISTINCT l.liked_id) >= 2
SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID, h.name HAVING COUNT(DISTINCT l.liked_id) >= 2
SELECT h.name FROM Highschooler h INNER JOIN Friend f1 ON h.ID = f1.student_id INNER JOIN Friend f2 ON f1.friend_id = f2.student_id LEFT JOIN Likes l ON h.ID = l.student_id AND l.liked_id = f2.friend_id WHERE h.grade > 5 GROUP BY h.ID, h.name HAVING COUNT(DISTINCT f1.friend_id) >= 2 AND COUNT(DISTINCT l.liked_id) >= 1
SELECT h.name FROM Highschooler h JOIN Friend f1 ON h.ID = f1.student_id JOIN Friend f2 ON f1.friend_id = f2.student_id JOIN Likes l ON h.ID = l.student_id WHERE h.grade > 5 GROUP BY h.ID, h.name HAVING COUNT(DISTINCT f2.friend_id) >= 2
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')
SELECT AVG(grade) AS average_grade FROM Highschooler WHERE ID IN ( SELECT DISTINCT student_id FROM Friend )
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN ( SELECT DISTINCT student_id FROM Friend UNION SELECT DISTINCT friend_id FROM Friend UNION SELECT DISTINCT student_id FROM Likes UNION SELECT DISTINCT liked_id FROM Likes )
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)
SELECT DISTINCT o.state FROM Owners o JOIN Professionals p ON o.state = p.state
SELECT DISTINCT o.state FROM Owners o JOIN Professionals p ON o.state = p.state
SELECT AVG(age) AS average_age FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id
SELECT AVG(age) AS average_age FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE treatment_type_code IS NOT NULL
SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id LEFT JOIN Dogs d ON t.dog_id = d.dog_id LEFT JOIN Owners o ON d.owner_id = o.owner_id WHERE o.state = 'Indiana' OR (SELECT COUNT(*) FROM Treatments WHERE professional_id = p.professional_id) > 2
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN ( SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2 )
SELECT d.name FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.cost_of_treatment <= 1000
SELECT d.name FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.cost_of_treatment <= 1000
SELECT DISTINCT o.first_name FROM Owners o LEFT JOIN Dogs d ON o.owner_id = d.owner_id LEFT JOIN Professionals p ON o.first_name = p.first_name WHERE (p.role_code IS NOT NULL OR d.name IS NULL)
SELECT DISTINCT o.first_name FROM Owners o JOIN Professionals p ON o.first_name = p.first_name LEFT JOIN Dogs d ON o.owner_id = d.owner_id WHERE (p.role_code = 'professional' OR p.role_code = 'owner') AND d.name IS NULL
SELECT p.professional_id, p.role_code, p.email_address FROM Professionals p WHERE p.professional_id NOT IN ( SELECT t.professional_id FROM Treatments t INNER JOIN Dogs d ON t.dog_id = d.dog_id WHERE d.breed_code LIKE '%Dog%' )
SELECT p.professional_id, p.role_code, p.email_address FROM Professionals p LEFT JOIN Treatments t ON p.professional_id = t.professional_id LEFT JOIN Dogs d ON t.dog_id = d.dog_id WHERE d.breed_code <> 'DOG' GROUP BY p.professional_id, p.role_code, p.email_address
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id ORDER BY COUNT(d.dog_id) DESC LIMIT 1
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o INNER JOIN Dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1
SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN ( SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT dog_id) >= 2 )
SELECT p.professional_id AS id, p.role_code AS role, p.first_name FROM Professionals p INNER JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id, p.role_code, p.first_name HAVING COUNT(DISTINCT t.treatment_id) >= 2
SELECT breed_name FROM Breeds WHERE breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT breed_name FROM Breeds WHERE breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1 )
SELECT o.owner_id, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1
SELECT o.owner_id, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1
SELECT treatment_type_description FROM Treatment_Types JOIN Treatments ON Treatment_Types.treatment_type_code = Treatments.treatment_type_code GROUP BY treatment_type_description ORDER BY SUM(cost_of_treatment) ASC LIMIT 1
SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code IN ( SELECT treatment_type_code FROM Treatments GROUP BY treatment_type_code HAVING SUM(cost_of_treatment) = ( SELECT MIN(total_cost) FROM ( SELECT treatment_type_code, SUM(cost_of_treatment) AS total_cost FROM Treatments GROUP BY treatment_type_code ) AS costs ) )
SELECT d.owner_id, o.zip_code, SUM(t.cost_of_treatment) AS total_paid FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.owner_id, o.zip_code ORDER BY total_paid DESC LIMIT 1
SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id JOIN Charges c ON t.cost_of_treatment = c.charge_amount GROUP BY o.owner_id, o.zip_code ORDER BY SUM(c.charge_amount) DESC LIMIT 1
SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN ( SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2 )
SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN ( SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2 )
SELECT p.first_name, p.last_name FROM Professionals p INNER JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON t.professional_id = p.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id
SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT o.first_name, o.last_name, s.size_description FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Sizes s ON d.size_code = s.size_code
SELECT o.first_name, o.last_name, s.size_description FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Sizes s ON d.size_code = s.size_code
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id
SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code JOIN Treatments t ON d.dog_id = t.dog_id WHERE b.breed_code = (SELECT breed_code FROM Breeds ORDER BY breed_code LIMIT 1) ORDER BY t.date_of_treatment
SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code JOIN Treatments t ON d.dog_id = t.dog_id JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code WHERE b.breed_name IN ( SELECT breed_name FROM Breeds GROUP BY breed_name HAVING COUNT(*) = 1 ) ORDER BY d.name, t.date_of_treatment
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia'
SELECT o.first_name, d.name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE o.state = 'Virginia'
SELECT Dogs.date_arrived as arriving_date, Dogs.date_departed as departing_date FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.date_departed IS NOT NULL
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs INNER JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Dogs.date_departed IS NOT NULL
SELECT o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id ORDER BY d.age ASC LIMIT 1
SELECT last_name FROM Owners WHERE owner_id = ( SELECT owner_id FROM Dogs WHERE age = ( SELECT MIN(age) FROM Dogs ) ORDER BY date_of_birth DESC LIMIT 1 )
SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'
SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin'
SELECT date_arrived, date_departed FROM Dogs
SELECT date_arrived, date_departed FROM Dogs
SELECT COUNT(DISTINCT dog_id) AS num_dogs_treated FROM Treatments
SELECT COUNT(DISTINCT dog_id) FROM Treatments WHERE treatment_type_code = 'dog_treatment'
SELECT COUNT(DISTINCT professional_id) FROM Treatments
SELECT COUNT(DISTINCT professional_id) FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id JOIN Dogs d ON t.dog_id = d.dog_id WHERE d.breed_code IN (SELECT breed_code FROM Breeds WHERE breed_name = 'dog')
SELECT p.role_code, p.street, p.city, p.state FROM Professionals p WHERE p.city LIKE '%West%'
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'
SELECT o.first_name, o.last_name, o.email_address FROM Owners o WHERE o.state LIKE '%North%'
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT COUNT(*) AS num_dogs_below_avg_age FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
SELECT COUNT(DISTINCT Dogs.dog_id) FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.treatment_id IS NULL
SELECT COUNT(DISTINCT Dogs.dog_id) FROM Dogs LEFT JOIN Treatments ON Dogs.dog_id = Treatments.dog_id WHERE Treatments.treatment_id IS NULL
SELECT COUNT(DISTINCT o.owner_id) FROM Owners o LEFT JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.owner_id IS NULL
SELECT COUNT(DISTINCT o.owner_id) AS num_owners FROM Owners o LEFT JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.dog_id IS NULL
SELECT COUNT(DISTINCT professional_id) FROM Professionals WHERE professional_id NOT IN ( SELECT DISTINCT professional_id FROM Treatments WHERE treatment_type_code = 'DOGS' )
SELECT COUNT(DISTINCT professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments INNER JOIN Dogs ON Treatments.dog_id = Dogs.dog_id WHERE Dogs.breed_code IS NOT NULL)
SELECT d.name, d.age, d.weight FROM Dogs d WHERE d.abandoned_yn = 1
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1
SELECT AVG(age) AS average_age_of_dogs FROM Dogs
SELECT AVG(age) AS average_age_of_dogs FROM Dogs
SELECT MAX(age) AS oldest_dog_age FROM Dogs
SELECT MAX(age) AS oldest_dog_age FROM Dogs
SELECT charge_type, charge_amount FROM Charges
SELECT charge_type, charge_amount FROM Charges
SELECT MAX(charge_amount) AS max_charge_amount FROM Charges
SELECT MAX(charge_amount) AS max_charge_amount FROM Charges
SELECT email_address, cell_number, home_phone FROM Professionals
SELECT Professionals.email_address, Professionals.cell_number, Professionals.home_phone FROM Professionals
SELECT b.breed_name, s.size_description FROM Breeds b, Sizes s, Dogs d WHERE b.breed_code = d.breed_code AND s.size_code = d.size_code
SELECT DISTINCT b.breed_name, s.size_description FROM Dogs d JOIN Breeds b ON d.breed_code = b.breed_code JOIN Sizes s ON d.size_code = s.size_code
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code
SELECT COUNT(DISTINCT Singer_ID) AS Num_Singers FROM singer
SELECT COUNT(DISTINCT Singer_ID) AS Singer_Count FROM singer
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
SELECT Birth_Year, Citizenship FROM singer
SELECT Birth_Year, Citizenship FROM singer
SELECT Name FROM singer WHERE Citizenship <> 'France'
SELECT Name FROM singer WHERE Citizenship <> 'France'
SELECT Name FROM singer WHERE Birth_Year IN (1948, 1949)
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949
SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer)
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
SELECT Citizenship, COUNT(DISTINCT Singer_ID) AS Num_Singers FROM singer GROUP BY Citizenship
SELECT Citizenship, COUNT(*) AS Num_Singers FROM singer GROUP BY Citizenship
SELECT Citizenship, COUNT(*) AS Num_Singers FROM singer GROUP BY Citizenship ORDER BY Num_Singers DESC LIMIT 1
SELECT Citizenship, COUNT(*) AS Count FROM singer GROUP BY Citizenship ORDER BY Count DESC LIMIT 1
SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship
SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship
SELECT song.Title, singer.Name FROM song INNER JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT song.Title, singer.Name FROM song INNER JOIN singer ON song.Singer_ID = singer.Singer_ID
SELECT DISTINCT s.Name FROM singer s INNER JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000
SELECT DISTINCT Name FROM singer INNER JOIN song ON singer.Singer_ID = song.Singer_ID WHERE Sales > 300000
SELECT Name FROM singer WHERE Singer_ID IN ( SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1 )
SELECT s.Name FROM singer s INNER JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Singer_ID, s.Name HAVING COUNT(so.Song_ID) > 1
SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name
SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
SELECT Name AS sname FROM singer WHERE Singer_ID NOT IN (SELECT DISTINCT Singer_ID FROM song)
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955 GROUP BY Citizenship HAVING COUNT(DISTINCT Singer_ID) > 1
SELECT COUNT(*) AS total_available_features FROM Other_Available_Features
SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code = ( SELECT feature_type_code FROM Other_Available_Features WHERE feature_name = 'AirCon' )
SELECT Ref_Property_Types.property_type_description FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code WHERE Properties.property_type_code = [insert code here]
SELECT property_name FROM Properties JOIN Ref_Property_Types ON Properties.property_type_code = Ref_Property_Types.property_type_code WHERE (Ref_Property_Types.property_type_description = 'house' OR Ref_Property_Types.property_type_description = 'apartment') AND room_count > 1
